// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: order.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Api {

  /// <summary>Holder for reflection information generated from order.proto</summary>
  public static partial class OrderReflection {

    #region Descriptor
    /// <summary>File descriptor for order.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OrderReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtvcmRlci5wcm90bxIDYXBpImcKFEFwcGxpY2F0aW9uSGVhcnRiZWF0EhgK",
            "B01zZ1R5cGUYIyABKAlSB21zZ1R5cGUSFQoFR3JwSUQYiScgASgJUgVncnBJ",
            "ZBIeCgpIZWFydEJ0SW50GGwgASgFUgpoZWFydEJ0SW50IqcBChVUcmlnZ2Vy",
            "aW5nSW5zdHJ1Y3Rpb24SHwoKUmVmQ2xPcmRJZBiODiABKAlSCnJlZkNsb3Jk",
            "SWQSJQoNVHJpZ2dlckFjdGlvbhjNCCABKAlSDXRyaWdnZXJBY3Rpb24SIQoL",
            "VHJpZ2dlclR5cGUYzAggASgJUgt0cmlnZ2VyVHlwZRIjCgxUcmlnZ2VyU2Nv",
            "cGUY3AwgASgJUgx0cmlnZ2VyU2NvcGUiRQoGUGFydGllEhsKCFBhcnRpZUlk",
            "GMADIAEoCVIIcGFydGllSWQSHgoKUGFydGllUm9sZRgtIAEoCVIKcGFydGll",
            "Um9sZSLgAQoEU0xUUBIYCgdPcmRUeXBlGCggASgJUgdvcmRUeXBlEhQKBVBy",
            "aWNlGCwgASgJUgVwcmljZRIWCgZTdG9wUHgYYyABKAlSBnN0b3BQeBIbCghD",
            "YXBQcmljZRivCSABKAlSCGNhcFByaWNlEiMKDFBlZ1ByaWNlVHlwZRjGCCAB",
            "KAlSDHBlZ1ByaWNlVHlwZRIlCg1QZWdPZmZzZXRUeXBlGMQGIAEoCVINcGVn",
            "T2Zmc2V0VHlwZRInCg5QZWdPZmZzZXRWYWx1ZRjTASABKAlSDnBlZ09mZnNl",
            "dFZhbHVlIswGCg5OZXdPcmRlclNpbmdsZRIYCgdNc2dUeXBlGCMgASgJUgdt",
            "c2dUeXBlEhgKB0NsT3JkSWQYCyABKAlSB2NsT3JkSWQSGAoHT3JkZXJJZBgl",
            "IAEoCVIHb3JkZXJJZBIWCgZTeW1ib2wYNyABKAlSBnN5bWJvbBISCgRTaWRl",
            "GDYgASgJUgRzaWRlEhwKCVNldHRsVHlwZRg/IAEoCVIJc2V0dGxUeXBlEiIK",
            "DFRyYW5zYWN0VGltZRg8IAEoA1IMdHJhbnNhY3RUaW1lEhwKCUxpc3RTZXFO",
            "bxhDIAEoBVIJbGlzdFNlcU5vEhoKCE9yZGVyUXR5GCYgASgJUghvcmRlclF0",
            "eRIYCgdPcmRUeXBlGCggASgJUgdvcmRUeXBlEhQKBVByaWNlGCwgASgJUgVw",
            "cmljZRIWCgZTdG9wUHgYYyABKAlSBnN0b3BQeBIbCghDYXBQcmljZRivCSAB",
            "KAlSCGNhcFByaWNlEhgKB0FjY291bnQYASABKARSB2FjY291bnQSGgoIRXhl",
            "Y0luc3QYEiADKAlSCGV4ZWNJbnN0EiAKC1RpbWVJbkZvcmNlGDsgASgJUgt0",
            "aW1lSW5Gb3JjZRIpCg9Db21taXNzaW9uTGV2ZWwYxxcgASgJUg9jb21taXNz",
            "aW9uTGV2ZWwSIwoMUGVnUHJpY2VUeXBlGMYIIAEoCVIMcGVnUHJpY2VUeXBl",
            "EiUKDVBlZ09mZnNldFR5cGUYxAYgASgJUg1wZWdPZmZzZXRUeXBlEicKDlBl",
            "Z09mZnNldFZhbHVlGNMBIAEoCVIOcGVnT2Zmc2V0VmFsdWUSUwoWVHJpZ2dl",
            "cmluZ0luc3RydWN0aW9ucxjaCCADKAsyGi5hcGkuVHJpZ2dlcmluZ0luc3Ry",
            "dWN0aW9uUhZ0cmlnZ2VyaW5nSW5zdHJ1Y3Rpb25zEh8KClBvc2l0aW9uSWQY",
            "uhQgASgEUgpwb3NpdGlvbklkEiYKDlBvc2l0aW9uRWZmZWN0GE0gASgJUg5w",
            "b3NpdGlvbkVmZmVjdBIeCgRTTFRQGIgnIAMoCzIJLmFwaS5TTFRQUgRzbHRw",
            "EhIKBFRleHQYOiABKAlSBHRleHQSFQoFR3JwSUQYiScgASgJUgVncnBJZCLx",
            "CwoPRXhlY3V0aW9uUmVwb3J0EhgKB01zZ1R5cGUYIyABKAlSB21zZ1R5cGUS",
            "JwoOT3JkU3RhdHVzUmVxSUQYlgYgASgJUg5vcmRTdGF0dXNSZXFJRBIYCgdB",
            "Y2NvdW50GAEgASgEUgdhY2NvdW50EhgKB0NsT3JkSWQYCyABKAlSB2NsT3Jk",
            "SWQSIAoLT3JpZ0NsT3JkSWQYKSABKAlSC29yaWdDbE9yZElkEhgKB09yZGVy",
            "SWQYJSABKAlSB29yZGVySWQSFgoGTGlzdElkGEIgASgJUgZsaXN0SWQSFgoG",
            "U3ltYm9sGDcgASgJUgZzeW1ib2wSGAoHT3JkVHlwZRgoIAEoCVIHb3JkVHlw",
            "ZRIUCgVQcmljZRgsIAEoCVIFcHJpY2USFgoGU3RvcFB4GGMgASgJUgZzdG9w",
            "UHgSGgoIRXhlY0luc3QYEiADKAlSCGV4ZWNJbnN0EiAKC1RpbWVJbkZvcmNl",
            "GDsgASgJUgt0aW1lSW5Gb3JjZRIiCgxUcmFuc2FjdFRpbWUYPCABKANSDHRy",
            "YW5zYWN0VGltZRIWCgZFeGVjSWQYESABKAlSBmV4ZWNJZBIbCghFeGVjVHlw",
            "ZRiWASABKAlSCGV4ZWNUeXBlEjUKFUV4ZWNSZXN0YXRlbWVudFJlYXNvbhj6",
            "AiABKAlSFWV4ZWNSZXN0YXRlbWVudFJlYXNvbhIZCgdUcmFkZUlkGOsHIAEo",
            "CVIHdHJhZGVJZBIcCglPcmRTdGF0dXMYJyABKAlSCW9yZFN0YXR1cxIiCgxP",
            "cmRSZWpSZWFzb24YZyABKAlSDG9yZFJlalJlYXNvbhISCgRTaWRlGDYgASgJ",
            "UgRzaWRlEhoKCE9yZGVyUXR5GCYgASgJUghvcmRlclF0eRIdCglMZWF2ZXNR",
            "dHkYlwEgASgJUglsZWF2ZXNRdHkSFgoGQ3VtUXR5GA4gASgJUgZjdW1RdHkS",
            "GAoHTGFzdFF0eRggIAEoCVIHbGFzdFF0eRIbCghDYXBQcmljZRivCSABKAlS",
            "CGNhcFByaWNlEhYKBkxhc3RQeBgfIAEoCVIGbGFzdFB4EhQKBUF2Z1B4GAYg",
            "ASgJUgVhdmdQeBIzChRDYWxjdWxhdGVkQ2N5TGFzdFF0eRigCCABKAlSFGNh",
            "bGN1bGF0ZWRDY3lMYXN0UXR5EhoKCEN1cnJlbmN5GA8gASgJUghjdXJyZW5j",
            "eRIkCg1TZXR0bEN1cnJlbmN5GHggASgJUg1zZXR0bEN1cnJlbmN5EhwKCVNl",
            "dHRsVHlwZRg/IAEoCVIJc2V0dGxUeXBlEhoKCE5ldE1vbmV5GHYgASgJUghu",
            "ZXRNb25leRIrChBMYXN0TGlxdWlkaXR5SW5kGNMGIAEoCVIQbGFzdExpcXVp",
            "ZGl0eUluZBIeCgpDb21taXNzaW9uGAwgASgJUgpjb21taXNzaW9uEhsKCENv",
            "bW1SYXRlGNEJIAEoCVIIY29tbVJhdGUSIwoMQ29tbUN1cnJlbmN5GN8DIAEo",
            "CVIMY29tbUN1cnJlbmN5Eh8KClJlamVjdFRleHQYsAogASgJUgpyZWplY3RU",
            "ZXh0EiMKDFBlZ1ByaWNlVHlwZRjGCCABKAlSDHBlZ1ByaWNlVHlwZRIlCg1Q",
            "ZWdPZmZzZXRUeXBlGMQGIAEoCVINcGVnT2Zmc2V0VHlwZRInCg5QZWdPZmZz",
            "ZXRWYWx1ZRjTASABKAlSDnBlZ09mZnNldFZhbHVlEh8KClBvc2l0aW9uSWQY",
            "uhQgASgEUgpwb3NpdGlvbklkEiYKDlBvc2l0aW9uRWZmZWN0GE0gASgJUg5w",
            "b3NpdGlvbkVmZmVjdBIdCglNYXJnaW5BbXQY7QwgASgJUgltYXJnaW5BbXQS",
            "JQoNTWFyZ2luQW10VHlwZRjsDCABKAlSDW1hcmdpbkFtdFR5cGUSIwoMTWFy",
            "Z2luQW10Q2N5GO4MIAEoCVIMbWFyZ2luQW10Q2N5Eh4KBFNMVFAYiCcgAygL",
            "MgkuYXBpLlNMVFBSBHNsdHASEgoEVGV4dBg6IAEoCVIEdGV4dCLuAQoST3Jk",
            "ZXJDYW5jZWxSZXF1ZXN0EhgKB01zZ1R5cGUYIyABKAlSB21zZ1R5cGUSGAoH",
            "Q2xPcmRJZBgLIAEoCVIHY2xPcmRJZBIgCgtPcmlnQ2xPcmRJZBgpIAEoCVIL",
            "b3JpZ0NsT3JkSWQSGAoHT3JkZXJJZBglIAEoCVIHb3JkZXJJZBIWCgZTeW1i",
            "b2wYNyABKAlSBnN5bWJvbBISCgRTaWRlGDYgASgJUgRzaWRlEiIKDFRyYW5z",
            "YWN0VGltZRg8IAEoA1IMdHJhbnNhY3RUaW1lEhgKB0FjY291bnQYASABKARS",
            "B2FjY291bnQi6QIKEU9yZGVyQ2FuY2VsUmVqZWN0EhgKB01zZ1R5cGUYIyAB",
            "KAlSB21zZ1R5cGUSGAoHQWNjb3VudBgBIAEoBFIHYWNjb3VudBIWCgZTeW1i",
            "b2wYNyABKAlSBnN5bWJvbBIYCgdDbE9yZElkGAsgASgJUgdjbE9yZElkEiAK",
            "C09yaWdDbE9yZElkGCkgASgJUgtvcmlnQ2xPcmRJZBIYCgdPcmRlcklkGCUg",
            "ASgJUgdvcmRlcklkEhwKCU9yZFN0YXR1cxgnIAEoCVIJb3JkU3RhdHVzEisK",
            "EEN4bFJlalJlc3BvbnNlVG8YsgMgASgJUhBjeGxSZWpSZXNwb25zZVRvEiIK",
            "DEN4bFJlalJlYXNvbhhmIAEoCVIMY3hsUmVqUmVhc29uEh8KClJlamVjdFRl",
            "eHQYsAogASgJUgpyZWplY3RUZXh0EiIKDFRyYW5zYWN0VGltZRg8IAEoA1IM",
            "dHJhbnNhY3RUaW1lIvEBChZPcmRlck1hc3NDYW5jZWxSZXF1ZXN0EhgKB01z",
            "Z1R5cGUYIyABKAlSB21zZ1R5cGUSGAoHQ2xPcmRJZBgLIAEoCVIHY2xPcmRJ",
            "ZBI1ChVNYXNzQ2FuY2VsUmVxdWVzdFR5cGUYkgQgASgJUhVtYXNzQ2FuY2Vs",
            "UmVxdWVzdFR5cGUSFgoGU3ltYm9sGDcgASgJUgZzeW1ib2wSEgoEU2lkZRg2",
            "IAEoCVIEc2lkZRImCg5Qb3NpdGlvbkVmZmVjdBhNIAEoCVIOcG9zaXRpb25F",
            "ZmZlY3QSGAoHQWNjb3VudBgBIAEoBFIHYWNjb3VudCKkAwoVT3JkZXJNYXNz",
            "Q2FuY2VsUmVwb3J0EhgKB01zZ1R5cGUYIyABKAlSB21zZ1R5cGUSGAoHQ2xP",
            "cmRJZBgLIAEoCVIHY2xPcmRJZBIvChJNYXNzQWN0aW9uUmVwb3J0SUQY2Qog",
            "ASgJUhJtYXNzQWN0aW9uUmVwb3J0SUQSLwoSTWFzc0NhbmNlbFJlc3BvbnNl",
            "GJMEIAEoCVISbWFzc0NhbmNlbFJlc3BvbnNlEjcKFk1hc3NDYW5jZWxSZWpl",
            "Y3RSZWFzb24YlAQgASgJUhZtYXNzQ2FuY2VsUmVqZWN0UmVhc29uEh8KClJl",
            "amVjdFRleHQYsAogASgJUgpyZWplY3RUZXh0EhYKBlN5bWJvbBg3IAEoCVIG",
            "c3ltYm9sEhIKBFNpZGUYNiABKAlSBHNpZGUSIgoMVHJhbnNhY3RUaW1lGDwg",
            "ASgDUgx0cmFuc2FjdFRpbWUSMQoTVG90YWxBZmZlY3RlZE9yZGVycxiVBCAB",
            "KANSE3RvdGFsQWZmZWN0ZWRPcmRlcnMSGAoHQWNjb3VudBgBIAEoBFIHYWNj",
            "b3VudCJbCgZSZWplY3QSGAoHTXNnVHlwZRgjIAEoCVIHbXNnVHlwZRIjCgxS",
            "ZWplY3RSZWFzb24Y/AIgASgJUgxyZWplY3RSZWFzb24SEgoEVGV4dBg6IAEo",
            "CVIEdGV4dCKlAQoST3JkZXJTdGF0dXNSZXF1ZXN0EhgKB01zZ1R5cGUYIyAB",
            "KAlSB21zZ1R5cGUSJwoOT3JkU3RhdHVzUmVxSWQYlgYgASgJUg5vcmRTdGF0",
            "dXNSZXFJZBIYCgdBY2NvdW50GAEgASgEUgdhY2NvdW50EhgKB0NsT3JkSWQY",
            "CyABKAlSB2NsT3JkSWQSGAoHT3JkZXJJZBglIAEoCVIHb3JkZXJJZCLjAQoW",
            "T3JkZXJNYXNzU3RhdHVzUmVxdWVzdBIYCgdNc2dUeXBlGCMgASgJUgdtc2dU",
            "eXBlEikKD01hc3NTdGF0dXNSZXFJZBjIBCABKAlSD21hc3NTdGF0dXNSZXFJ",
            "ZBItChFNYXNzU3RhdHVzUmVxVHlwZRjJBCABKAlSEW1hc3NTdGF0dXNSZXFU",
            "eXBlEhgKB0FjY291bnQYASABKARSB2FjY291bnQSFgoGU3ltYm9sGDcgASgJ",
            "UgZzeW1ib2wSIwoMVHJhbnNhY3RUaW1lGMQEIAMoA1IMdHJhbnNhY3RUaW1l",
            "IvQBChdPcmRlck1hc3NTdGF0dXNSZXNwb25zZRIYCgdNc2dUeXBlGCMgASgJ",
            "Ugdtc2dUeXBlEikKD01hc3NTdGF0dXNSZXFJZBjIBCABKAlSD21hc3NTdGF0",
            "dXNSZXFJZBIYCgdBY2NvdW50GAEgASgEUgdhY2NvdW50EkEKEEV4ZWN1dGlv",
            "blJlcG9ydHMY9AkgAygLMhQuYXBpLkV4ZWN1dGlvblJlcG9ydFIQZXhlY3V0",
            "aW9uUmVwb3J0cxIjCgxSZWplY3RSZWFzb24Y/AIgASgJUgxyZWplY3RSZWFz",
            "b24SEgoEVGV4dBg6IAEoCVIEdGV4dCK1AQoZVHJhZGVDYXB0dXJlUmVwb3J0",
            "UmVxdWVzdBIYCgdNc2dUeXBlGCMgASgJUgdtc2dUeXBlEicKDlRyYWRlUmVx",
            "dWVzdElEGLgEIAEoCVIOdHJhZGVSZXF1ZXN0SUQSGAoHQWNjb3VudBgBIAEo",
            "BFIHYWNjb3VudBIWCgZTeW1ib2wYNyABKAlSBnN5bWJvbBIjCgxUcmFuc2Fj",
            "dFRpbWUYxAQgAygDUgx0cmFuc2FjdFRpbWUi+QEKHk1hc3NUcmFkZUNhcHR1",
            "cmVSZXBvcnRSZXNwb25zZRIYCgdNc2dUeXBlGCMgASgJUgdtc2dUeXBlEicK",
            "DlRyYWRlUmVxdWVzdElEGLgEIAEoCVIOdHJhZGVSZXF1ZXN0SUQSGAoHQWNj",
            "b3VudBgBIAEoBFIHYWNjb3VudBJBChBFeGVjdXRpb25SZXBvcnRzGPQJIAMo",
            "CzIULmFwaS5FeGVjdXRpb25SZXBvcnRSEGV4ZWN1dGlvblJlcG9ydHMSIwoM",
            "UmVqZWN0UmVhc29uGPwCIAEoCVIMcmVqZWN0UmVhc29uEhIKBFRleHQYOiAB",
            "KAlSBHRleHQijQQKGU9yZGVyQ2FuY2VsUmVwbGFjZVJlcXVlc3QSGAoHTXNn",
            "VHlwZRgjIAEoCVIHbXNnVHlwZRIYCgdDbE9yZElkGAsgASgJUgdjbE9yZElk",
            "EiAKC09yaWdDbE9yZElkGCkgASgJUgtvcmlnQ2xPcmRJZBIYCgdPcmRlcklk",
            "GCUgASgJUgdvcmRlcklkEhYKBlN5bWJvbBg3IAEoCVIGc3ltYm9sEhIKBFNp",
            "ZGUYNiABKAlSBHNpZGUSIgoMVHJhbnNhY3RUaW1lGDwgASgDUgx0cmFuc2Fj",
            "dFRpbWUSGAoHQWNjb3VudBgBIAEoBFIHYWNjb3VudBIaCghFeGVjSW5zdBgS",
            "IAMoCVIIZXhlY0luc3QSGgoIT3JkZXJRdHkYJiABKAlSCG9yZGVyUXR5EhQK",
            "BVByaWNlGCwgASgJUgVwcmljZRIWCgZTdG9wUHgYYyABKAlSBnN0b3BQeBIb",
            "CghDYXBQcmljZRivCSABKAlSCGNhcFByaWNlEiMKDFBlZ1ByaWNlVHlwZRjG",
            "CCABKAlSDHBlZ1ByaWNlVHlwZRIlCg1QZWdPZmZzZXRUeXBlGMQGIAEoCVIN",
            "cGVnT2Zmc2V0VHlwZRInCg5QZWdPZmZzZXRWYWx1ZRjTASABKAlSDnBlZ09m",
            "ZnNldFZhbHVlEh4KBFNMVFAYiCcgAygLMgkuYXBpLlNMVFBSBHNsdHAi7QIK",
            "DE5ld09yZGVyTGlzdBIYCgdNc2dUeXBlGCMgASgJUgdtc2dUeXBlEhYKBkxp",
            "c3RJZBhCIAEoCVIGbGlzdElkEhkKB0JpZFR5cGUYigMgASgJUgdiaWRUeXBl",
            "EiAKC1RvdE5vT3JkZXJzGEQgASgFUgt0b3ROb09yZGVycxIpCg9Db250aW5n",
            "ZW5jeVR5cGUY6QogASgJUg9jb250aW5nZW5jeVR5cGUSMwoKTGlzdE9yZEdy",
            "cBhJIAMoCzITLmFwaS5OZXdPcmRlclNpbmdsZVIKbGlzdE9yZEdycBI4Cg1O",
            "ZXN0ZWRMaXN0R3JwGO0NIAMoCzIRLmFwaS5OZXdPcmRlckxpc3RSDW5lc3Rl",
            "ZExpc3RHcnASFgoGU3ltYm9sGDcgASgJUgZzeW1ib2wSIgoMVHJhbnNhY3RU",
            "aW1lGDwgASgDUgx0cmFuc2FjdFRpbWUSGAoHQWNjb3VudBgBIAEoBFIHYWNj",
            "b3VudCJWCg9PcmRlckxpc3RBY3Rpb24SKQoPQ29udGluZ2VuY3lUeXBlGOkK",
            "IAEoCVIPY29udGluZ2VuY3lUeXBlEhgKB09yZGVySWQYJSADKAlSB29yZGVy",
            "SWQiqgMKCkxpc3RTdGF0dXMSGAoHTXNnVHlwZRgjIAEoCVIHbXNnVHlwZRIY",
            "CgdBY2NvdW50GAEgASgEUgdhY2NvdW50EhYKBkxpc3RJZBhCIAEoCVIGbGlz",
            "dElkEhYKBlN5bWJvbBg3IAEoCVIGc3ltYm9sEicKDkxpc3RTdGF0dXNUeXBl",
            "GK0DIAEoCVIObGlzdFN0YXR1c1R5cGUSKQoPTGlzdE9yZGVyU3RhdHVzGK8D",
            "IAEoCVIPbGlzdE9yZGVyU3RhdHVzEikKD0NvbnRpbmdlbmN5VHlwZRjpCiAB",
            "KAlSD2NvbnRpbmdlbmN5VHlwZRIrChBMaXN0UmVqZWN0UmVhc29uGOoKIAEo",
            "CVIQbGlzdFJlamVjdFJlYXNvbhI/Cg9MaXN0UmVqZWN0T3JkZXIY6wogASgL",
            "MhQuYXBpLkV4ZWN1dGlvblJlcG9ydFIPbGlzdFJlamVjdE9yZGVyEiIKDFRy",
            "YW5zYWN0VGltZRg8IAEoA1IMdHJhbnNhY3RUaW1lEicKDkxpc3RTdGF0dXNU",
            "ZXh0GLwDIAEoCVIObGlzdFN0YXR1c1RleHRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.ApplicationHeartbeat), global::Api.ApplicationHeartbeat.Parser, new[]{ "MsgType", "GrpID", "HeartBtInt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.TriggeringInstruction), global::Api.TriggeringInstruction.Parser, new[]{ "RefClOrdId", "TriggerAction", "TriggerType", "TriggerScope" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Partie), global::Api.Partie.Parser, new[]{ "PartieId", "PartieRole" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.SLTP), global::Api.SLTP.Parser, new[]{ "OrdType", "Price", "StopPx", "CapPrice", "PegPriceType", "PegOffsetType", "PegOffsetValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.NewOrderSingle), global::Api.NewOrderSingle.Parser, new[]{ "MsgType", "ClOrdId", "OrderId", "Symbol", "Side", "SettlType", "TransactTime", "ListSeqNo", "OrderQty", "OrdType", "Price", "StopPx", "CapPrice", "Account", "ExecInst", "TimeInForce", "CommissionLevel", "PegPriceType", "PegOffsetType", "PegOffsetValue", "TriggeringInstructions", "PositionId", "PositionEffect", "SLTP", "Text", "GrpID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.ExecutionReport), global::Api.ExecutionReport.Parser, new[]{ "MsgType", "OrdStatusReqID", "Account", "ClOrdId", "OrigClOrdId", "OrderId", "ListId", "Symbol", "OrdType", "Price", "StopPx", "ExecInst", "TimeInForce", "TransactTime", "ExecId", "ExecType", "ExecRestatementReason", "TradeId", "OrdStatus", "OrdRejReason", "Side", "OrderQty", "LeavesQty", "CumQty", "LastQty", "CapPrice", "LastPx", "AvgPx", "CalculatedCcyLastQty", "Currency", "SettlCurrency", "SettlType", "NetMoney", "LastLiquidityInd", "Commission", "CommRate", "CommCurrency", "RejectText", "PegPriceType", "PegOffsetType", "PegOffsetValue", "PositionId", "PositionEffect", "MarginAmt", "MarginAmtType", "MarginAmtCcy", "SLTP", "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.OrderCancelRequest), global::Api.OrderCancelRequest.Parser, new[]{ "MsgType", "ClOrdId", "OrigClOrdId", "OrderId", "Symbol", "Side", "TransactTime", "Account" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.OrderCancelReject), global::Api.OrderCancelReject.Parser, new[]{ "MsgType", "Account", "Symbol", "ClOrdId", "OrigClOrdId", "OrderId", "OrdStatus", "CxlRejResponseTo", "CxlRejReason", "RejectText", "TransactTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.OrderMassCancelRequest), global::Api.OrderMassCancelRequest.Parser, new[]{ "MsgType", "ClOrdId", "MassCancelRequestType", "Symbol", "Side", "PositionEffect", "Account" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.OrderMassCancelReport), global::Api.OrderMassCancelReport.Parser, new[]{ "MsgType", "ClOrdId", "MassActionReportID", "MassCancelResponse", "MassCancelRejectReason", "RejectText", "Symbol", "Side", "TransactTime", "TotalAffectedOrders", "Account" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Reject), global::Api.Reject.Parser, new[]{ "MsgType", "RejectReason", "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.OrderStatusRequest), global::Api.OrderStatusRequest.Parser, new[]{ "MsgType", "OrdStatusReqId", "Account", "ClOrdId", "OrderId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.OrderMassStatusRequest), global::Api.OrderMassStatusRequest.Parser, new[]{ "MsgType", "MassStatusReqId", "MassStatusReqType", "Account", "Symbol", "TransactTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.OrderMassStatusResponse), global::Api.OrderMassStatusResponse.Parser, new[]{ "MsgType", "MassStatusReqId", "Account", "ExecutionReports", "RejectReason", "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.TradeCaptureReportRequest), global::Api.TradeCaptureReportRequest.Parser, new[]{ "MsgType", "TradeRequestID", "Account", "Symbol", "TransactTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.MassTradeCaptureReportResponse), global::Api.MassTradeCaptureReportResponse.Parser, new[]{ "MsgType", "TradeRequestID", "Account", "ExecutionReports", "RejectReason", "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.OrderCancelReplaceRequest), global::Api.OrderCancelReplaceRequest.Parser, new[]{ "MsgType", "ClOrdId", "OrigClOrdId", "OrderId", "Symbol", "Side", "TransactTime", "Account", "ExecInst", "OrderQty", "Price", "StopPx", "CapPrice", "PegPriceType", "PegOffsetType", "PegOffsetValue", "SLTP" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.NewOrderList), global::Api.NewOrderList.Parser, new[]{ "MsgType", "ListId", "BidType", "TotNoOrders", "ContingencyType", "ListOrdGrp", "NestedListGrp", "Symbol", "TransactTime", "Account" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.OrderListAction), global::Api.OrderListAction.Parser, new[]{ "ContingencyType", "OrderId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.ListStatus), global::Api.ListStatus.Parser, new[]{ "MsgType", "Account", "ListId", "Symbol", "ListStatusType", "ListOrderStatus", "ContingencyType", "ListRejectReason", "ListRejectOrder", "TransactTime", "ListStatusText" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ApplicationHeartbeat : pb::IMessage<ApplicationHeartbeat> {
    private static readonly pb::MessageParser<ApplicationHeartbeat> _parser = new pb::MessageParser<ApplicationHeartbeat>(() => new ApplicationHeartbeat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplicationHeartbeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.OrderReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationHeartbeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationHeartbeat(ApplicationHeartbeat other) : this() {
      msgType_ = other.msgType_;
      grpID_ = other.grpID_;
      heartBtInt_ = other.heartBtInt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplicationHeartbeat Clone() {
      return new ApplicationHeartbeat(this);
    }

    /// <summary>Field number for the "MsgType" field.</summary>
    public const int MsgTypeFieldNumber = 35;
    private string msgType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgType {
      get { return msgType_; }
      set {
        msgType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GrpID" field.</summary>
    public const int GrpIDFieldNumber = 5001;
    private string grpID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GrpID {
      get { return grpID_; }
      set {
        grpID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HeartBtInt" field.</summary>
    public const int HeartBtIntFieldNumber = 108;
    private int heartBtInt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeartBtInt {
      get { return heartBtInt_; }
      set {
        heartBtInt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplicationHeartbeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplicationHeartbeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (GrpID != other.GrpID) return false;
      if (HeartBtInt != other.HeartBtInt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType.Length != 0) hash ^= MsgType.GetHashCode();
      if (GrpID.Length != 0) hash ^= GrpID.GetHashCode();
      if (HeartBtInt != 0) hash ^= HeartBtInt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MsgType.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(MsgType);
      }
      if (HeartBtInt != 0) {
        output.WriteRawTag(224, 6);
        output.WriteInt32(HeartBtInt);
      }
      if (GrpID.Length != 0) {
        output.WriteRawTag(202, 184, 2);
        output.WriteString(GrpID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MsgType);
      }
      if (GrpID.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(GrpID);
      }
      if (HeartBtInt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HeartBtInt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplicationHeartbeat other) {
      if (other == null) {
        return;
      }
      if (other.MsgType.Length != 0) {
        MsgType = other.MsgType;
      }
      if (other.GrpID.Length != 0) {
        GrpID = other.GrpID;
      }
      if (other.HeartBtInt != 0) {
        HeartBtInt = other.HeartBtInt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 282: {
            MsgType = input.ReadString();
            break;
          }
          case 864: {
            HeartBtInt = input.ReadInt32();
            break;
          }
          case 40010: {
            GrpID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TriggeringInstruction : pb::IMessage<TriggeringInstruction> {
    private static readonly pb::MessageParser<TriggeringInstruction> _parser = new pb::MessageParser<TriggeringInstruction>(() => new TriggeringInstruction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggeringInstruction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.OrderReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggeringInstruction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggeringInstruction(TriggeringInstruction other) : this() {
      refClOrdId_ = other.refClOrdId_;
      triggerAction_ = other.triggerAction_;
      triggerType_ = other.triggerType_;
      triggerScope_ = other.triggerScope_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggeringInstruction Clone() {
      return new TriggeringInstruction(this);
    }

    /// <summary>Field number for the "RefClOrdId" field.</summary>
    public const int RefClOrdIdFieldNumber = 1806;
    private string refClOrdId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RefClOrdId {
      get { return refClOrdId_; }
      set {
        refClOrdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TriggerAction" field.</summary>
    public const int TriggerActionFieldNumber = 1101;
    private string triggerAction_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TriggerAction {
      get { return triggerAction_; }
      set {
        triggerAction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TriggerType" field.</summary>
    public const int TriggerTypeFieldNumber = 1100;
    private string triggerType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TriggerType {
      get { return triggerType_; }
      set {
        triggerType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TriggerScope" field.</summary>
    public const int TriggerScopeFieldNumber = 1628;
    private string triggerScope_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TriggerScope {
      get { return triggerScope_; }
      set {
        triggerScope_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TriggeringInstruction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TriggeringInstruction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RefClOrdId != other.RefClOrdId) return false;
      if (TriggerAction != other.TriggerAction) return false;
      if (TriggerType != other.TriggerType) return false;
      if (TriggerScope != other.TriggerScope) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RefClOrdId.Length != 0) hash ^= RefClOrdId.GetHashCode();
      if (TriggerAction.Length != 0) hash ^= TriggerAction.GetHashCode();
      if (TriggerType.Length != 0) hash ^= TriggerType.GetHashCode();
      if (TriggerScope.Length != 0) hash ^= TriggerScope.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TriggerType.Length != 0) {
        output.WriteRawTag(226, 68);
        output.WriteString(TriggerType);
      }
      if (TriggerAction.Length != 0) {
        output.WriteRawTag(234, 68);
        output.WriteString(TriggerAction);
      }
      if (TriggerScope.Length != 0) {
        output.WriteRawTag(226, 101);
        output.WriteString(TriggerScope);
      }
      if (RefClOrdId.Length != 0) {
        output.WriteRawTag(242, 112);
        output.WriteString(RefClOrdId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RefClOrdId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RefClOrdId);
      }
      if (TriggerAction.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TriggerAction);
      }
      if (TriggerType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TriggerType);
      }
      if (TriggerScope.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TriggerScope);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TriggeringInstruction other) {
      if (other == null) {
        return;
      }
      if (other.RefClOrdId.Length != 0) {
        RefClOrdId = other.RefClOrdId;
      }
      if (other.TriggerAction.Length != 0) {
        TriggerAction = other.TriggerAction;
      }
      if (other.TriggerType.Length != 0) {
        TriggerType = other.TriggerType;
      }
      if (other.TriggerScope.Length != 0) {
        TriggerScope = other.TriggerScope;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8802: {
            TriggerType = input.ReadString();
            break;
          }
          case 8810: {
            TriggerAction = input.ReadString();
            break;
          }
          case 13026: {
            TriggerScope = input.ReadString();
            break;
          }
          case 14450: {
            RefClOrdId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Partie : pb::IMessage<Partie> {
    private static readonly pb::MessageParser<Partie> _parser = new pb::MessageParser<Partie>(() => new Partie());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Partie> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.OrderReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Partie() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Partie(Partie other) : this() {
      partieId_ = other.partieId_;
      partieRole_ = other.partieRole_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Partie Clone() {
      return new Partie(this);
    }

    /// <summary>Field number for the "PartieId" field.</summary>
    public const int PartieIdFieldNumber = 448;
    private string partieId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartieId {
      get { return partieId_; }
      set {
        partieId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PartieRole" field.</summary>
    public const int PartieRoleFieldNumber = 45;
    private string partieRole_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartieRole {
      get { return partieRole_; }
      set {
        partieRole_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Partie);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Partie other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PartieId != other.PartieId) return false;
      if (PartieRole != other.PartieRole) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PartieId.Length != 0) hash ^= PartieId.GetHashCode();
      if (PartieRole.Length != 0) hash ^= PartieRole.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartieRole.Length != 0) {
        output.WriteRawTag(234, 2);
        output.WriteString(PartieRole);
      }
      if (PartieId.Length != 0) {
        output.WriteRawTag(130, 28);
        output.WriteString(PartieId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartieId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PartieId);
      }
      if (PartieRole.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PartieRole);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Partie other) {
      if (other == null) {
        return;
      }
      if (other.PartieId.Length != 0) {
        PartieId = other.PartieId;
      }
      if (other.PartieRole.Length != 0) {
        PartieRole = other.PartieRole;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 362: {
            PartieRole = input.ReadString();
            break;
          }
          case 3586: {
            PartieId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SLTP : pb::IMessage<SLTP> {
    private static readonly pb::MessageParser<SLTP> _parser = new pb::MessageParser<SLTP>(() => new SLTP());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SLTP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.OrderReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SLTP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SLTP(SLTP other) : this() {
      ordType_ = other.ordType_;
      price_ = other.price_;
      stopPx_ = other.stopPx_;
      capPrice_ = other.capPrice_;
      pegPriceType_ = other.pegPriceType_;
      pegOffsetType_ = other.pegOffsetType_;
      pegOffsetValue_ = other.pegOffsetValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SLTP Clone() {
      return new SLTP(this);
    }

    /// <summary>Field number for the "OrdType" field.</summary>
    public const int OrdTypeFieldNumber = 40;
    private string ordType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrdType {
      get { return ordType_; }
      set {
        ordType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 44;
    private string price_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Price {
      get { return price_; }
      set {
        price_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StopPx" field.</summary>
    public const int StopPxFieldNumber = 99;
    private string stopPx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StopPx {
      get { return stopPx_; }
      set {
        stopPx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CapPrice" field.</summary>
    public const int CapPriceFieldNumber = 1199;
    private string capPrice_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CapPrice {
      get { return capPrice_; }
      set {
        capPrice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PegPriceType" field.</summary>
    public const int PegPriceTypeFieldNumber = 1094;
    private string pegPriceType_ = "";
    /// <summary>
    /// Trailing orders
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PegPriceType {
      get { return pegPriceType_; }
      set {
        pegPriceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PegOffsetType" field.</summary>
    public const int PegOffsetTypeFieldNumber = 836;
    private string pegOffsetType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PegOffsetType {
      get { return pegOffsetType_; }
      set {
        pegOffsetType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PegOffsetValue" field.</summary>
    public const int PegOffsetValueFieldNumber = 211;
    private string pegOffsetValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PegOffsetValue {
      get { return pegOffsetValue_; }
      set {
        pegOffsetValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SLTP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SLTP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrdType != other.OrdType) return false;
      if (Price != other.Price) return false;
      if (StopPx != other.StopPx) return false;
      if (CapPrice != other.CapPrice) return false;
      if (PegPriceType != other.PegPriceType) return false;
      if (PegOffsetType != other.PegOffsetType) return false;
      if (PegOffsetValue != other.PegOffsetValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrdType.Length != 0) hash ^= OrdType.GetHashCode();
      if (Price.Length != 0) hash ^= Price.GetHashCode();
      if (StopPx.Length != 0) hash ^= StopPx.GetHashCode();
      if (CapPrice.Length != 0) hash ^= CapPrice.GetHashCode();
      if (PegPriceType.Length != 0) hash ^= PegPriceType.GetHashCode();
      if (PegOffsetType.Length != 0) hash ^= PegOffsetType.GetHashCode();
      if (PegOffsetValue.Length != 0) hash ^= PegOffsetValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OrdType.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(OrdType);
      }
      if (Price.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(Price);
      }
      if (StopPx.Length != 0) {
        output.WriteRawTag(154, 6);
        output.WriteString(StopPx);
      }
      if (PegOffsetValue.Length != 0) {
        output.WriteRawTag(154, 13);
        output.WriteString(PegOffsetValue);
      }
      if (PegOffsetType.Length != 0) {
        output.WriteRawTag(162, 52);
        output.WriteString(PegOffsetType);
      }
      if (PegPriceType.Length != 0) {
        output.WriteRawTag(178, 68);
        output.WriteString(PegPriceType);
      }
      if (CapPrice.Length != 0) {
        output.WriteRawTag(250, 74);
        output.WriteString(CapPrice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrdType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrdType);
      }
      if (Price.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Price);
      }
      if (StopPx.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StopPx);
      }
      if (CapPrice.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CapPrice);
      }
      if (PegPriceType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PegPriceType);
      }
      if (PegOffsetType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PegOffsetType);
      }
      if (PegOffsetValue.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PegOffsetValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SLTP other) {
      if (other == null) {
        return;
      }
      if (other.OrdType.Length != 0) {
        OrdType = other.OrdType;
      }
      if (other.Price.Length != 0) {
        Price = other.Price;
      }
      if (other.StopPx.Length != 0) {
        StopPx = other.StopPx;
      }
      if (other.CapPrice.Length != 0) {
        CapPrice = other.CapPrice;
      }
      if (other.PegPriceType.Length != 0) {
        PegPriceType = other.PegPriceType;
      }
      if (other.PegOffsetType.Length != 0) {
        PegOffsetType = other.PegOffsetType;
      }
      if (other.PegOffsetValue.Length != 0) {
        PegOffsetValue = other.PegOffsetValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 322: {
            OrdType = input.ReadString();
            break;
          }
          case 354: {
            Price = input.ReadString();
            break;
          }
          case 794: {
            StopPx = input.ReadString();
            break;
          }
          case 1690: {
            PegOffsetValue = input.ReadString();
            break;
          }
          case 6690: {
            PegOffsetType = input.ReadString();
            break;
          }
          case 8754: {
            PegPriceType = input.ReadString();
            break;
          }
          case 9594: {
            CapPrice = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NewOrderSingle : pb::IMessage<NewOrderSingle> {
    private static readonly pb::MessageParser<NewOrderSingle> _parser = new pb::MessageParser<NewOrderSingle>(() => new NewOrderSingle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewOrderSingle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.OrderReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewOrderSingle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewOrderSingle(NewOrderSingle other) : this() {
      msgType_ = other.msgType_;
      clOrdId_ = other.clOrdId_;
      orderId_ = other.orderId_;
      symbol_ = other.symbol_;
      side_ = other.side_;
      settlType_ = other.settlType_;
      transactTime_ = other.transactTime_;
      listSeqNo_ = other.listSeqNo_;
      orderQty_ = other.orderQty_;
      ordType_ = other.ordType_;
      price_ = other.price_;
      stopPx_ = other.stopPx_;
      capPrice_ = other.capPrice_;
      account_ = other.account_;
      execInst_ = other.execInst_.Clone();
      timeInForce_ = other.timeInForce_;
      commissionLevel_ = other.commissionLevel_;
      pegPriceType_ = other.pegPriceType_;
      pegOffsetType_ = other.pegOffsetType_;
      pegOffsetValue_ = other.pegOffsetValue_;
      triggeringInstructions_ = other.triggeringInstructions_.Clone();
      positionId_ = other.positionId_;
      positionEffect_ = other.positionEffect_;
      sLTP_ = other.sLTP_.Clone();
      text_ = other.text_;
      grpID_ = other.grpID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewOrderSingle Clone() {
      return new NewOrderSingle(this);
    }

    /// <summary>Field number for the "MsgType" field.</summary>
    public const int MsgTypeFieldNumber = 35;
    private string msgType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgType {
      get { return msgType_; }
      set {
        msgType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClOrdId" field.</summary>
    public const int ClOrdIdFieldNumber = 11;
    private string clOrdId_ = "";
    /// <summary>
    /// Order ID unique for Account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClOrdId {
      get { return clOrdId_; }
      set {
        clOrdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrderId" field.</summary>
    public const int OrderIdFieldNumber = 37;
    private string orderId_ = "";
    /// <summary>
    /// Unique order ID across the exchange.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 55;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Side" field.</summary>
    public const int SideFieldNumber = 54;
    private string side_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Side {
      get { return side_; }
      set {
        side_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SettlType" field.</summary>
    public const int SettlTypeFieldNumber = 63;
    private string settlType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SettlType {
      get { return settlType_; }
      set {
        settlType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TransactTime" field.</summary>
    public const int TransactTimeFieldNumber = 60;
    private long transactTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactTime {
      get { return transactTime_; }
      set {
        transactTime_ = value;
      }
    }

    /// <summary>Field number for the "ListSeqNo" field.</summary>
    public const int ListSeqNoFieldNumber = 67;
    private int listSeqNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ListSeqNo {
      get { return listSeqNo_; }
      set {
        listSeqNo_ = value;
      }
    }

    /// <summary>Field number for the "OrderQty" field.</summary>
    public const int OrderQtyFieldNumber = 38;
    private string orderQty_ = "";
    /// <summary>
    /// Quantity of sold or bought base currency.
    /// Could be change by:
    /// 1. Partially order execution.
    /// 2. Order modifications.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderQty {
      get { return orderQty_; }
      set {
        orderQty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrdType" field.</summary>
    public const int OrdTypeFieldNumber = 40;
    private string ordType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrdType {
      get { return ordType_; }
      set {
        ordType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 44;
    private string price_ = "";
    /// <summary>
    /// For deferred orders only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Price {
      get { return price_; }
      set {
        price_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StopPx" field.</summary>
    public const int StopPxFieldNumber = 99;
    private string stopPx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StopPx {
      get { return stopPx_; }
      set {
        stopPx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CapPrice" field.</summary>
    public const int CapPriceFieldNumber = 1199;
    private string capPrice_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CapPrice {
      get { return capPrice_; }
      set {
        capPrice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 1;
    private ulong account_;
    /// <summary>
    /// Unique client ID across echange.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "ExecInst" field.</summary>
    public const int ExecInstFieldNumber = 18;
    private static readonly pb::FieldCodec<string> _repeated_execInst_codec
        = pb::FieldCodec.ForString(146);
    private readonly pbc::RepeatedField<string> execInst_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ExecInst {
      get { return execInst_; }
    }

    /// <summary>Field number for the "TimeInForce" field.</summary>
    public const int TimeInForceFieldNumber = 59;
    private string timeInForce_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TimeInForce {
      get { return timeInForce_; }
      set {
        timeInForce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CommissionLevel" field.</summary>
    public const int CommissionLevelFieldNumber = 3015;
    private string commissionLevel_ = "";
    /// <summary>
    /// Commission
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CommissionLevel {
      get { return commissionLevel_; }
      set {
        commissionLevel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PegPriceType" field.</summary>
    public const int PegPriceTypeFieldNumber = 1094;
    private string pegPriceType_ = "";
    /// <summary>
    /// Trailing orders
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PegPriceType {
      get { return pegPriceType_; }
      set {
        pegPriceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PegOffsetType" field.</summary>
    public const int PegOffsetTypeFieldNumber = 836;
    private string pegOffsetType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PegOffsetType {
      get { return pegOffsetType_; }
      set {
        pegOffsetType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PegOffsetValue" field.</summary>
    public const int PegOffsetValueFieldNumber = 211;
    private string pegOffsetValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PegOffsetValue {
      get { return pegOffsetValue_; }
      set {
        pegOffsetValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TriggeringInstructions" field.</summary>
    public const int TriggeringInstructionsFieldNumber = 1114;
    private static readonly pb::FieldCodec<global::Api.TriggeringInstruction> _repeated_triggeringInstructions_codec
        = pb::FieldCodec.ForMessage(8914, global::Api.TriggeringInstruction.Parser);
    private readonly pbc::RepeatedField<global::Api.TriggeringInstruction> triggeringInstructions_ = new pbc::RepeatedField<global::Api.TriggeringInstruction>();
    /// <summary>
    /// Triggers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Api.TriggeringInstruction> TriggeringInstructions {
      get { return triggeringInstructions_; }
    }

    /// <summary>Field number for the "PositionId" field.</summary>
    public const int PositionIdFieldNumber = 2618;
    private ulong positionId_;
    /// <summary>
    /// Deriative positions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PositionId {
      get { return positionId_; }
      set {
        positionId_ = value;
      }
    }

    /// <summary>Field number for the "PositionEffect" field.</summary>
    public const int PositionEffectFieldNumber = 77;
    private string positionEffect_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PositionEffect {
      get { return positionEffect_; }
      set {
        positionEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SLTP" field.</summary>
    public const int SLTPFieldNumber = 5000;
    private static readonly pb::FieldCodec<global::Api.SLTP> _repeated_sLTP_codec
        = pb::FieldCodec.ForMessage(40002, global::Api.SLTP.Parser);
    private readonly pbc::RepeatedField<global::Api.SLTP> sLTP_ = new pbc::RepeatedField<global::Api.SLTP>();
    /// <summary>
    /// Derivative SLTP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Api.SLTP> SLTP {
      get { return sLTP_; }
    }

    /// <summary>Field number for the "Text" field.</summary>
    public const int TextFieldNumber = 58;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GrpID" field.</summary>
    public const int GrpIDFieldNumber = 5001;
    private string grpID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GrpID {
      get { return grpID_; }
      set {
        grpID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewOrderSingle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewOrderSingle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (ClOrdId != other.ClOrdId) return false;
      if (OrderId != other.OrderId) return false;
      if (Symbol != other.Symbol) return false;
      if (Side != other.Side) return false;
      if (SettlType != other.SettlType) return false;
      if (TransactTime != other.TransactTime) return false;
      if (ListSeqNo != other.ListSeqNo) return false;
      if (OrderQty != other.OrderQty) return false;
      if (OrdType != other.OrdType) return false;
      if (Price != other.Price) return false;
      if (StopPx != other.StopPx) return false;
      if (CapPrice != other.CapPrice) return false;
      if (Account != other.Account) return false;
      if(!execInst_.Equals(other.execInst_)) return false;
      if (TimeInForce != other.TimeInForce) return false;
      if (CommissionLevel != other.CommissionLevel) return false;
      if (PegPriceType != other.PegPriceType) return false;
      if (PegOffsetType != other.PegOffsetType) return false;
      if (PegOffsetValue != other.PegOffsetValue) return false;
      if(!triggeringInstructions_.Equals(other.triggeringInstructions_)) return false;
      if (PositionId != other.PositionId) return false;
      if (PositionEffect != other.PositionEffect) return false;
      if(!sLTP_.Equals(other.sLTP_)) return false;
      if (Text != other.Text) return false;
      if (GrpID != other.GrpID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType.Length != 0) hash ^= MsgType.GetHashCode();
      if (ClOrdId.Length != 0) hash ^= ClOrdId.GetHashCode();
      if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Side.Length != 0) hash ^= Side.GetHashCode();
      if (SettlType.Length != 0) hash ^= SettlType.GetHashCode();
      if (TransactTime != 0L) hash ^= TransactTime.GetHashCode();
      if (ListSeqNo != 0) hash ^= ListSeqNo.GetHashCode();
      if (OrderQty.Length != 0) hash ^= OrderQty.GetHashCode();
      if (OrdType.Length != 0) hash ^= OrdType.GetHashCode();
      if (Price.Length != 0) hash ^= Price.GetHashCode();
      if (StopPx.Length != 0) hash ^= StopPx.GetHashCode();
      if (CapPrice.Length != 0) hash ^= CapPrice.GetHashCode();
      if (Account != 0UL) hash ^= Account.GetHashCode();
      hash ^= execInst_.GetHashCode();
      if (TimeInForce.Length != 0) hash ^= TimeInForce.GetHashCode();
      if (CommissionLevel.Length != 0) hash ^= CommissionLevel.GetHashCode();
      if (PegPriceType.Length != 0) hash ^= PegPriceType.GetHashCode();
      if (PegOffsetType.Length != 0) hash ^= PegOffsetType.GetHashCode();
      if (PegOffsetValue.Length != 0) hash ^= PegOffsetValue.GetHashCode();
      hash ^= triggeringInstructions_.GetHashCode();
      if (PositionId != 0UL) hash ^= PositionId.GetHashCode();
      if (PositionEffect.Length != 0) hash ^= PositionEffect.GetHashCode();
      hash ^= sLTP_.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (GrpID.Length != 0) hash ^= GrpID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Account);
      }
      if (ClOrdId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ClOrdId);
      }
      execInst_.WriteTo(output, _repeated_execInst_codec);
      if (MsgType.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(MsgType);
      }
      if (OrderId.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(OrderId);
      }
      if (OrderQty.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(OrderQty);
      }
      if (OrdType.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(OrdType);
      }
      if (Price.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(Price);
      }
      if (Side.Length != 0) {
        output.WriteRawTag(178, 3);
        output.WriteString(Side);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteString(Symbol);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(210, 3);
        output.WriteString(Text);
      }
      if (TimeInForce.Length != 0) {
        output.WriteRawTag(218, 3);
        output.WriteString(TimeInForce);
      }
      if (TransactTime != 0L) {
        output.WriteRawTag(224, 3);
        output.WriteInt64(TransactTime);
      }
      if (SettlType.Length != 0) {
        output.WriteRawTag(250, 3);
        output.WriteString(SettlType);
      }
      if (ListSeqNo != 0) {
        output.WriteRawTag(152, 4);
        output.WriteInt32(ListSeqNo);
      }
      if (PositionEffect.Length != 0) {
        output.WriteRawTag(234, 4);
        output.WriteString(PositionEffect);
      }
      if (StopPx.Length != 0) {
        output.WriteRawTag(154, 6);
        output.WriteString(StopPx);
      }
      if (PegOffsetValue.Length != 0) {
        output.WriteRawTag(154, 13);
        output.WriteString(PegOffsetValue);
      }
      if (PegOffsetType.Length != 0) {
        output.WriteRawTag(162, 52);
        output.WriteString(PegOffsetType);
      }
      if (PegPriceType.Length != 0) {
        output.WriteRawTag(178, 68);
        output.WriteString(PegPriceType);
      }
      triggeringInstructions_.WriteTo(output, _repeated_triggeringInstructions_codec);
      if (CapPrice.Length != 0) {
        output.WriteRawTag(250, 74);
        output.WriteString(CapPrice);
      }
      if (PositionId != 0UL) {
        output.WriteRawTag(208, 163, 1);
        output.WriteUInt64(PositionId);
      }
      if (CommissionLevel.Length != 0) {
        output.WriteRawTag(186, 188, 1);
        output.WriteString(CommissionLevel);
      }
      sLTP_.WriteTo(output, _repeated_sLTP_codec);
      if (GrpID.Length != 0) {
        output.WriteRawTag(202, 184, 2);
        output.WriteString(GrpID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MsgType);
      }
      if (ClOrdId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClOrdId);
      }
      if (OrderId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (Symbol.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Side.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Side);
      }
      if (SettlType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SettlType);
      }
      if (TransactTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TransactTime);
      }
      if (ListSeqNo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ListSeqNo);
      }
      if (OrderQty.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrderQty);
      }
      if (OrdType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrdType);
      }
      if (Price.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Price);
      }
      if (StopPx.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StopPx);
      }
      if (CapPrice.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CapPrice);
      }
      if (Account != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Account);
      }
      size += execInst_.CalculateSize(_repeated_execInst_codec);
      if (TimeInForce.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TimeInForce);
      }
      if (CommissionLevel.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(CommissionLevel);
      }
      if (PegPriceType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PegPriceType);
      }
      if (PegOffsetType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PegOffsetType);
      }
      if (PegOffsetValue.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PegOffsetValue);
      }
      size += triggeringInstructions_.CalculateSize(_repeated_triggeringInstructions_codec);
      if (PositionId != 0UL) {
        size += 3 + pb::CodedOutputStream.ComputeUInt64Size(PositionId);
      }
      if (PositionEffect.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PositionEffect);
      }
      size += sLTP_.CalculateSize(_repeated_sLTP_codec);
      if (Text.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (GrpID.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(GrpID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewOrderSingle other) {
      if (other == null) {
        return;
      }
      if (other.MsgType.Length != 0) {
        MsgType = other.MsgType;
      }
      if (other.ClOrdId.Length != 0) {
        ClOrdId = other.ClOrdId;
      }
      if (other.OrderId.Length != 0) {
        OrderId = other.OrderId;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Side.Length != 0) {
        Side = other.Side;
      }
      if (other.SettlType.Length != 0) {
        SettlType = other.SettlType;
      }
      if (other.TransactTime != 0L) {
        TransactTime = other.TransactTime;
      }
      if (other.ListSeqNo != 0) {
        ListSeqNo = other.ListSeqNo;
      }
      if (other.OrderQty.Length != 0) {
        OrderQty = other.OrderQty;
      }
      if (other.OrdType.Length != 0) {
        OrdType = other.OrdType;
      }
      if (other.Price.Length != 0) {
        Price = other.Price;
      }
      if (other.StopPx.Length != 0) {
        StopPx = other.StopPx;
      }
      if (other.CapPrice.Length != 0) {
        CapPrice = other.CapPrice;
      }
      if (other.Account != 0UL) {
        Account = other.Account;
      }
      execInst_.Add(other.execInst_);
      if (other.TimeInForce.Length != 0) {
        TimeInForce = other.TimeInForce;
      }
      if (other.CommissionLevel.Length != 0) {
        CommissionLevel = other.CommissionLevel;
      }
      if (other.PegPriceType.Length != 0) {
        PegPriceType = other.PegPriceType;
      }
      if (other.PegOffsetType.Length != 0) {
        PegOffsetType = other.PegOffsetType;
      }
      if (other.PegOffsetValue.Length != 0) {
        PegOffsetValue = other.PegOffsetValue;
      }
      triggeringInstructions_.Add(other.triggeringInstructions_);
      if (other.PositionId != 0UL) {
        PositionId = other.PositionId;
      }
      if (other.PositionEffect.Length != 0) {
        PositionEffect = other.PositionEffect;
      }
      sLTP_.Add(other.sLTP_);
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.GrpID.Length != 0) {
        GrpID = other.GrpID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Account = input.ReadUInt64();
            break;
          }
          case 90: {
            ClOrdId = input.ReadString();
            break;
          }
          case 146: {
            execInst_.AddEntriesFrom(input, _repeated_execInst_codec);
            break;
          }
          case 282: {
            MsgType = input.ReadString();
            break;
          }
          case 298: {
            OrderId = input.ReadString();
            break;
          }
          case 306: {
            OrderQty = input.ReadString();
            break;
          }
          case 322: {
            OrdType = input.ReadString();
            break;
          }
          case 354: {
            Price = input.ReadString();
            break;
          }
          case 434: {
            Side = input.ReadString();
            break;
          }
          case 442: {
            Symbol = input.ReadString();
            break;
          }
          case 466: {
            Text = input.ReadString();
            break;
          }
          case 474: {
            TimeInForce = input.ReadString();
            break;
          }
          case 480: {
            TransactTime = input.ReadInt64();
            break;
          }
          case 506: {
            SettlType = input.ReadString();
            break;
          }
          case 536: {
            ListSeqNo = input.ReadInt32();
            break;
          }
          case 618: {
            PositionEffect = input.ReadString();
            break;
          }
          case 794: {
            StopPx = input.ReadString();
            break;
          }
          case 1690: {
            PegOffsetValue = input.ReadString();
            break;
          }
          case 6690: {
            PegOffsetType = input.ReadString();
            break;
          }
          case 8754: {
            PegPriceType = input.ReadString();
            break;
          }
          case 8914: {
            triggeringInstructions_.AddEntriesFrom(input, _repeated_triggeringInstructions_codec);
            break;
          }
          case 9594: {
            CapPrice = input.ReadString();
            break;
          }
          case 20944: {
            PositionId = input.ReadUInt64();
            break;
          }
          case 24122: {
            CommissionLevel = input.ReadString();
            break;
          }
          case 40002: {
            sLTP_.AddEntriesFrom(input, _repeated_sLTP_codec);
            break;
          }
          case 40010: {
            GrpID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExecutionReport : pb::IMessage<ExecutionReport> {
    private static readonly pb::MessageParser<ExecutionReport> _parser = new pb::MessageParser<ExecutionReport>(() => new ExecutionReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecutionReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.OrderReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecutionReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecutionReport(ExecutionReport other) : this() {
      msgType_ = other.msgType_;
      ordStatusReqID_ = other.ordStatusReqID_;
      account_ = other.account_;
      clOrdId_ = other.clOrdId_;
      origClOrdId_ = other.origClOrdId_;
      orderId_ = other.orderId_;
      listId_ = other.listId_;
      symbol_ = other.symbol_;
      ordType_ = other.ordType_;
      price_ = other.price_;
      stopPx_ = other.stopPx_;
      execInst_ = other.execInst_.Clone();
      timeInForce_ = other.timeInForce_;
      transactTime_ = other.transactTime_;
      execId_ = other.execId_;
      execType_ = other.execType_;
      execRestatementReason_ = other.execRestatementReason_;
      tradeId_ = other.tradeId_;
      ordStatus_ = other.ordStatus_;
      ordRejReason_ = other.ordRejReason_;
      side_ = other.side_;
      orderQty_ = other.orderQty_;
      leavesQty_ = other.leavesQty_;
      cumQty_ = other.cumQty_;
      lastQty_ = other.lastQty_;
      capPrice_ = other.capPrice_;
      lastPx_ = other.lastPx_;
      avgPx_ = other.avgPx_;
      calculatedCcyLastQty_ = other.calculatedCcyLastQty_;
      currency_ = other.currency_;
      settlCurrency_ = other.settlCurrency_;
      settlType_ = other.settlType_;
      netMoney_ = other.netMoney_;
      lastLiquidityInd_ = other.lastLiquidityInd_;
      commission_ = other.commission_;
      commRate_ = other.commRate_;
      commCurrency_ = other.commCurrency_;
      rejectText_ = other.rejectText_;
      pegPriceType_ = other.pegPriceType_;
      pegOffsetType_ = other.pegOffsetType_;
      pegOffsetValue_ = other.pegOffsetValue_;
      positionId_ = other.positionId_;
      positionEffect_ = other.positionEffect_;
      marginAmt_ = other.marginAmt_;
      marginAmtType_ = other.marginAmtType_;
      marginAmtCcy_ = other.marginAmtCcy_;
      sLTP_ = other.sLTP_.Clone();
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecutionReport Clone() {
      return new ExecutionReport(this);
    }

    /// <summary>Field number for the "MsgType" field.</summary>
    public const int MsgTypeFieldNumber = 35;
    private string msgType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgType {
      get { return msgType_; }
      set {
        msgType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrdStatusReqID" field.</summary>
    public const int OrdStatusReqIDFieldNumber = 790;
    private string ordStatusReqID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrdStatusReqID {
      get { return ordStatusReqID_; }
      set {
        ordStatusReqID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 1;
    private ulong account_;
    /// <summary>
    /// Finance account. Unique client ID across exchange.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "ClOrdId" field.</summary>
    public const int ClOrdIdFieldNumber = 11;
    private string clOrdId_ = "";
    /// <summary>
    /// Client order identificator.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClOrdId {
      get { return clOrdId_; }
      set {
        clOrdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrigClOrdId" field.</summary>
    public const int OrigClOrdIdFieldNumber = 41;
    private string origClOrdId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrigClOrdId {
      get { return origClOrdId_; }
      set {
        origClOrdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrderId" field.</summary>
    public const int OrderIdFieldNumber = 37;
    private string orderId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ListId" field.</summary>
    public const int ListIdFieldNumber = 66;
    private string listId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ListId {
      get { return listId_; }
      set {
        listId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 55;
    private string symbol_ = "";
    /// <summary>
    /// Trade instrument name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrdType" field.</summary>
    public const int OrdTypeFieldNumber = 40;
    private string ordType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrdType {
      get { return ordType_; }
      set {
        ordType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 44;
    private string price_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Price {
      get { return price_; }
      set {
        price_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StopPx" field.</summary>
    public const int StopPxFieldNumber = 99;
    private string stopPx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StopPx {
      get { return stopPx_; }
      set {
        stopPx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ExecInst" field.</summary>
    public const int ExecInstFieldNumber = 18;
    private static readonly pb::FieldCodec<string> _repeated_execInst_codec
        = pb::FieldCodec.ForString(146);
    private readonly pbc::RepeatedField<string> execInst_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ExecInst {
      get { return execInst_; }
    }

    /// <summary>Field number for the "TimeInForce" field.</summary>
    public const int TimeInForceFieldNumber = 59;
    private string timeInForce_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TimeInForce {
      get { return timeInForce_; }
      set {
        timeInForce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TransactTime" field.</summary>
    public const int TransactTimeFieldNumber = 60;
    private long transactTime_;
    /// <summary>
    /// Moment(timestamp) of transaction execution.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactTime {
      get { return transactTime_; }
      set {
        transactTime_ = value;
      }
    }

    /// <summary>Field number for the "ExecId" field.</summary>
    public const int ExecIdFieldNumber = 17;
    private string execId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExecId {
      get { return execId_; }
      set {
        execId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ExecType" field.</summary>
    public const int ExecTypeFieldNumber = 150;
    private string execType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExecType {
      get { return execType_; }
      set {
        execType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ExecRestatementReason" field.</summary>
    public const int ExecRestatementReasonFieldNumber = 378;
    private string execRestatementReason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExecRestatementReason {
      get { return execRestatementReason_; }
      set {
        execRestatementReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TradeId" field.</summary>
    public const int TradeIdFieldNumber = 1003;
    private string tradeId_ = "";
    /// <summary>
    /// Trade identifier
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeId {
      get { return tradeId_; }
      set {
        tradeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrdStatus" field.</summary>
    public const int OrdStatusFieldNumber = 39;
    private string ordStatus_ = "";
    /// <summary>
    /// Current order status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrdStatus {
      get { return ordStatus_; }
      set {
        ordStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrdRejReason" field.</summary>
    public const int OrdRejReasonFieldNumber = 103;
    private string ordRejReason_ = "";
    /// <summary>
    /// Rejection reason.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrdRejReason {
      get { return ordRejReason_; }
      set {
        ordRejReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Side" field.</summary>
    public const int SideFieldNumber = 54;
    private string side_ = "";
    /// <summary>
    /// Trade side, could be Buy or Sell.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Side {
      get { return side_; }
      set {
        side_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrderQty" field.</summary>
    public const int OrderQtyFieldNumber = 38;
    private string orderQty_ = "";
    /// <summary>
    /// Current OrderQty value. Could be changed by trader.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderQty {
      get { return orderQty_; }
      set {
        orderQty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LeavesQty" field.</summary>
    public const int LeavesQtyFieldNumber = 151;
    private string leavesQty_ = "";
    /// <summary>
    /// Quantity which is leaved after last execution.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LeavesQty {
      get { return leavesQty_; }
      set {
        leavesQty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CumQty" field.</summary>
    public const int CumQtyFieldNumber = 14;
    private string cumQty_ = "";
    /// <summary>
    /// Cummulative quantity value of executed part of order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CumQty {
      get { return cumQty_; }
      set {
        cumQty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LastQty" field.</summary>
    public const int LastQtyFieldNumber = 32;
    private string lastQty_ = "";
    /// <summary>
    /// Quantity closed by last execution.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastQty {
      get { return lastQty_; }
      set {
        lastQty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CapPrice" field.</summary>
    public const int CapPriceFieldNumber = 1199;
    private string capPrice_ = "";
    /// <summary>
    /// Stop order CapPrice
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CapPrice {
      get { return capPrice_; }
      set {
        capPrice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LastPx" field.</summary>
    public const int LastPxFieldNumber = 31;
    private string lastPx_ = "";
    /// <summary>
    /// Execution price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastPx {
      get { return lastPx_; }
      set {
        lastPx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AvgPx" field.</summary>
    public const int AvgPxFieldNumber = 6;
    private string avgPx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvgPx {
      get { return avgPx_; }
      set {
        avgPx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CalculatedCcyLastQty" field.</summary>
    public const int CalculatedCcyLastQtyFieldNumber = 1056;
    private string calculatedCcyLastQty_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CalculatedCcyLastQty {
      get { return calculatedCcyLastQty_; }
      set {
        calculatedCcyLastQty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Currency" field.</summary>
    public const int CurrencyFieldNumber = 15;
    private string currency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SettlCurrency" field.</summary>
    public const int SettlCurrencyFieldNumber = 120;
    private string settlCurrency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SettlCurrency {
      get { return settlCurrency_; }
      set {
        settlCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SettlType" field.</summary>
    public const int SettlTypeFieldNumber = 63;
    private string settlType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SettlType {
      get { return settlType_; }
      set {
        settlType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NetMoney" field.</summary>
    public const int NetMoneyFieldNumber = 118;
    private string netMoney_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NetMoney {
      get { return netMoney_; }
      set {
        netMoney_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LastLiquidityInd" field.</summary>
    public const int LastLiquidityIndFieldNumber = 851;
    private string lastLiquidityInd_ = "";
    /// <summary>
    /// Commission
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastLiquidityInd {
      get { return lastLiquidityInd_; }
      set {
        lastLiquidityInd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Commission" field.</summary>
    public const int CommissionFieldNumber = 12;
    private string commission_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Commission {
      get { return commission_; }
      set {
        commission_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CommRate" field.</summary>
    public const int CommRateFieldNumber = 1233;
    private string commRate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CommRate {
      get { return commRate_; }
      set {
        commRate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CommCurrency" field.</summary>
    public const int CommCurrencyFieldNumber = 479;
    private string commCurrency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CommCurrency {
      get { return commCurrency_; }
      set {
        commCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RejectText" field.</summary>
    public const int RejectTextFieldNumber = 1328;
    private string rejectText_ = "";
    /// <summary>
    /// Rejection detailed description.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RejectText {
      get { return rejectText_; }
      set {
        rejectText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PegPriceType" field.</summary>
    public const int PegPriceTypeFieldNumber = 1094;
    private string pegPriceType_ = "";
    /// <summary>
    /// Trailings
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PegPriceType {
      get { return pegPriceType_; }
      set {
        pegPriceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PegOffsetType" field.</summary>
    public const int PegOffsetTypeFieldNumber = 836;
    private string pegOffsetType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PegOffsetType {
      get { return pegOffsetType_; }
      set {
        pegOffsetType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PegOffsetValue" field.</summary>
    public const int PegOffsetValueFieldNumber = 211;
    private string pegOffsetValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PegOffsetValue {
      get { return pegOffsetValue_; }
      set {
        pegOffsetValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PositionId" field.</summary>
    public const int PositionIdFieldNumber = 2618;
    private ulong positionId_;
    /// <summary>
    /// Position
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PositionId {
      get { return positionId_; }
      set {
        positionId_ = value;
      }
    }

    /// <summary>Field number for the "PositionEffect" field.</summary>
    public const int PositionEffectFieldNumber = 77;
    private string positionEffect_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PositionEffect {
      get { return positionEffect_; }
      set {
        positionEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MarginAmt" field.</summary>
    public const int MarginAmtFieldNumber = 1645;
    private string marginAmt_ = "";
    /// <summary>
    /// Margin
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MarginAmt {
      get { return marginAmt_; }
      set {
        marginAmt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MarginAmtType" field.</summary>
    public const int MarginAmtTypeFieldNumber = 1644;
    private string marginAmtType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MarginAmtType {
      get { return marginAmtType_; }
      set {
        marginAmtType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MarginAmtCcy" field.</summary>
    public const int MarginAmtCcyFieldNumber = 1646;
    private string marginAmtCcy_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MarginAmtCcy {
      get { return marginAmtCcy_; }
      set {
        marginAmtCcy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SLTP" field.</summary>
    public const int SLTPFieldNumber = 5000;
    private static readonly pb::FieldCodec<global::Api.SLTP> _repeated_sLTP_codec
        = pb::FieldCodec.ForMessage(40002, global::Api.SLTP.Parser);
    private readonly pbc::RepeatedField<global::Api.SLTP> sLTP_ = new pbc::RepeatedField<global::Api.SLTP>();
    /// <summary>
    /// Derivative SLTP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Api.SLTP> SLTP {
      get { return sLTP_; }
    }

    /// <summary>Field number for the "Text" field.</summary>
    public const int TextFieldNumber = 58;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecutionReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecutionReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (OrdStatusReqID != other.OrdStatusReqID) return false;
      if (Account != other.Account) return false;
      if (ClOrdId != other.ClOrdId) return false;
      if (OrigClOrdId != other.OrigClOrdId) return false;
      if (OrderId != other.OrderId) return false;
      if (ListId != other.ListId) return false;
      if (Symbol != other.Symbol) return false;
      if (OrdType != other.OrdType) return false;
      if (Price != other.Price) return false;
      if (StopPx != other.StopPx) return false;
      if(!execInst_.Equals(other.execInst_)) return false;
      if (TimeInForce != other.TimeInForce) return false;
      if (TransactTime != other.TransactTime) return false;
      if (ExecId != other.ExecId) return false;
      if (ExecType != other.ExecType) return false;
      if (ExecRestatementReason != other.ExecRestatementReason) return false;
      if (TradeId != other.TradeId) return false;
      if (OrdStatus != other.OrdStatus) return false;
      if (OrdRejReason != other.OrdRejReason) return false;
      if (Side != other.Side) return false;
      if (OrderQty != other.OrderQty) return false;
      if (LeavesQty != other.LeavesQty) return false;
      if (CumQty != other.CumQty) return false;
      if (LastQty != other.LastQty) return false;
      if (CapPrice != other.CapPrice) return false;
      if (LastPx != other.LastPx) return false;
      if (AvgPx != other.AvgPx) return false;
      if (CalculatedCcyLastQty != other.CalculatedCcyLastQty) return false;
      if (Currency != other.Currency) return false;
      if (SettlCurrency != other.SettlCurrency) return false;
      if (SettlType != other.SettlType) return false;
      if (NetMoney != other.NetMoney) return false;
      if (LastLiquidityInd != other.LastLiquidityInd) return false;
      if (Commission != other.Commission) return false;
      if (CommRate != other.CommRate) return false;
      if (CommCurrency != other.CommCurrency) return false;
      if (RejectText != other.RejectText) return false;
      if (PegPriceType != other.PegPriceType) return false;
      if (PegOffsetType != other.PegOffsetType) return false;
      if (PegOffsetValue != other.PegOffsetValue) return false;
      if (PositionId != other.PositionId) return false;
      if (PositionEffect != other.PositionEffect) return false;
      if (MarginAmt != other.MarginAmt) return false;
      if (MarginAmtType != other.MarginAmtType) return false;
      if (MarginAmtCcy != other.MarginAmtCcy) return false;
      if(!sLTP_.Equals(other.sLTP_)) return false;
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType.Length != 0) hash ^= MsgType.GetHashCode();
      if (OrdStatusReqID.Length != 0) hash ^= OrdStatusReqID.GetHashCode();
      if (Account != 0UL) hash ^= Account.GetHashCode();
      if (ClOrdId.Length != 0) hash ^= ClOrdId.GetHashCode();
      if (OrigClOrdId.Length != 0) hash ^= OrigClOrdId.GetHashCode();
      if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
      if (ListId.Length != 0) hash ^= ListId.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (OrdType.Length != 0) hash ^= OrdType.GetHashCode();
      if (Price.Length != 0) hash ^= Price.GetHashCode();
      if (StopPx.Length != 0) hash ^= StopPx.GetHashCode();
      hash ^= execInst_.GetHashCode();
      if (TimeInForce.Length != 0) hash ^= TimeInForce.GetHashCode();
      if (TransactTime != 0L) hash ^= TransactTime.GetHashCode();
      if (ExecId.Length != 0) hash ^= ExecId.GetHashCode();
      if (ExecType.Length != 0) hash ^= ExecType.GetHashCode();
      if (ExecRestatementReason.Length != 0) hash ^= ExecRestatementReason.GetHashCode();
      if (TradeId.Length != 0) hash ^= TradeId.GetHashCode();
      if (OrdStatus.Length != 0) hash ^= OrdStatus.GetHashCode();
      if (OrdRejReason.Length != 0) hash ^= OrdRejReason.GetHashCode();
      if (Side.Length != 0) hash ^= Side.GetHashCode();
      if (OrderQty.Length != 0) hash ^= OrderQty.GetHashCode();
      if (LeavesQty.Length != 0) hash ^= LeavesQty.GetHashCode();
      if (CumQty.Length != 0) hash ^= CumQty.GetHashCode();
      if (LastQty.Length != 0) hash ^= LastQty.GetHashCode();
      if (CapPrice.Length != 0) hash ^= CapPrice.GetHashCode();
      if (LastPx.Length != 0) hash ^= LastPx.GetHashCode();
      if (AvgPx.Length != 0) hash ^= AvgPx.GetHashCode();
      if (CalculatedCcyLastQty.Length != 0) hash ^= CalculatedCcyLastQty.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (SettlCurrency.Length != 0) hash ^= SettlCurrency.GetHashCode();
      if (SettlType.Length != 0) hash ^= SettlType.GetHashCode();
      if (NetMoney.Length != 0) hash ^= NetMoney.GetHashCode();
      if (LastLiquidityInd.Length != 0) hash ^= LastLiquidityInd.GetHashCode();
      if (Commission.Length != 0) hash ^= Commission.GetHashCode();
      if (CommRate.Length != 0) hash ^= CommRate.GetHashCode();
      if (CommCurrency.Length != 0) hash ^= CommCurrency.GetHashCode();
      if (RejectText.Length != 0) hash ^= RejectText.GetHashCode();
      if (PegPriceType.Length != 0) hash ^= PegPriceType.GetHashCode();
      if (PegOffsetType.Length != 0) hash ^= PegOffsetType.GetHashCode();
      if (PegOffsetValue.Length != 0) hash ^= PegOffsetValue.GetHashCode();
      if (PositionId != 0UL) hash ^= PositionId.GetHashCode();
      if (PositionEffect.Length != 0) hash ^= PositionEffect.GetHashCode();
      if (MarginAmt.Length != 0) hash ^= MarginAmt.GetHashCode();
      if (MarginAmtType.Length != 0) hash ^= MarginAmtType.GetHashCode();
      if (MarginAmtCcy.Length != 0) hash ^= MarginAmtCcy.GetHashCode();
      hash ^= sLTP_.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Account);
      }
      if (AvgPx.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AvgPx);
      }
      if (ClOrdId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ClOrdId);
      }
      if (Commission.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Commission);
      }
      if (CumQty.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(CumQty);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Currency);
      }
      if (ExecId.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(ExecId);
      }
      execInst_.WriteTo(output, _repeated_execInst_codec);
      if (LastPx.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(LastPx);
      }
      if (LastQty.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(LastQty);
      }
      if (MsgType.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(MsgType);
      }
      if (OrderId.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(OrderId);
      }
      if (OrderQty.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(OrderQty);
      }
      if (OrdStatus.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(OrdStatus);
      }
      if (OrdType.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(OrdType);
      }
      if (OrigClOrdId.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(OrigClOrdId);
      }
      if (Price.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(Price);
      }
      if (Side.Length != 0) {
        output.WriteRawTag(178, 3);
        output.WriteString(Side);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteString(Symbol);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(210, 3);
        output.WriteString(Text);
      }
      if (TimeInForce.Length != 0) {
        output.WriteRawTag(218, 3);
        output.WriteString(TimeInForce);
      }
      if (TransactTime != 0L) {
        output.WriteRawTag(224, 3);
        output.WriteInt64(TransactTime);
      }
      if (SettlType.Length != 0) {
        output.WriteRawTag(250, 3);
        output.WriteString(SettlType);
      }
      if (ListId.Length != 0) {
        output.WriteRawTag(146, 4);
        output.WriteString(ListId);
      }
      if (PositionEffect.Length != 0) {
        output.WriteRawTag(234, 4);
        output.WriteString(PositionEffect);
      }
      if (StopPx.Length != 0) {
        output.WriteRawTag(154, 6);
        output.WriteString(StopPx);
      }
      if (OrdRejReason.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(OrdRejReason);
      }
      if (NetMoney.Length != 0) {
        output.WriteRawTag(178, 7);
        output.WriteString(NetMoney);
      }
      if (SettlCurrency.Length != 0) {
        output.WriteRawTag(194, 7);
        output.WriteString(SettlCurrency);
      }
      if (ExecType.Length != 0) {
        output.WriteRawTag(178, 9);
        output.WriteString(ExecType);
      }
      if (LeavesQty.Length != 0) {
        output.WriteRawTag(186, 9);
        output.WriteString(LeavesQty);
      }
      if (PegOffsetValue.Length != 0) {
        output.WriteRawTag(154, 13);
        output.WriteString(PegOffsetValue);
      }
      if (ExecRestatementReason.Length != 0) {
        output.WriteRawTag(210, 23);
        output.WriteString(ExecRestatementReason);
      }
      if (CommCurrency.Length != 0) {
        output.WriteRawTag(250, 29);
        output.WriteString(CommCurrency);
      }
      if (OrdStatusReqID.Length != 0) {
        output.WriteRawTag(178, 49);
        output.WriteString(OrdStatusReqID);
      }
      if (PegOffsetType.Length != 0) {
        output.WriteRawTag(162, 52);
        output.WriteString(PegOffsetType);
      }
      if (LastLiquidityInd.Length != 0) {
        output.WriteRawTag(154, 53);
        output.WriteString(LastLiquidityInd);
      }
      if (TradeId.Length != 0) {
        output.WriteRawTag(218, 62);
        output.WriteString(TradeId);
      }
      if (CalculatedCcyLastQty.Length != 0) {
        output.WriteRawTag(130, 66);
        output.WriteString(CalculatedCcyLastQty);
      }
      if (PegPriceType.Length != 0) {
        output.WriteRawTag(178, 68);
        output.WriteString(PegPriceType);
      }
      if (CapPrice.Length != 0) {
        output.WriteRawTag(250, 74);
        output.WriteString(CapPrice);
      }
      if (CommRate.Length != 0) {
        output.WriteRawTag(138, 77);
        output.WriteString(CommRate);
      }
      if (RejectText.Length != 0) {
        output.WriteRawTag(130, 83);
        output.WriteString(RejectText);
      }
      if (MarginAmtType.Length != 0) {
        output.WriteRawTag(226, 102);
        output.WriteString(MarginAmtType);
      }
      if (MarginAmt.Length != 0) {
        output.WriteRawTag(234, 102);
        output.WriteString(MarginAmt);
      }
      if (MarginAmtCcy.Length != 0) {
        output.WriteRawTag(242, 102);
        output.WriteString(MarginAmtCcy);
      }
      if (PositionId != 0UL) {
        output.WriteRawTag(208, 163, 1);
        output.WriteUInt64(PositionId);
      }
      sLTP_.WriteTo(output, _repeated_sLTP_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MsgType);
      }
      if (OrdStatusReqID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrdStatusReqID);
      }
      if (Account != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Account);
      }
      if (ClOrdId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClOrdId);
      }
      if (OrigClOrdId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrigClOrdId);
      }
      if (OrderId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (ListId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ListId);
      }
      if (Symbol.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (OrdType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrdType);
      }
      if (Price.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Price);
      }
      if (StopPx.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StopPx);
      }
      size += execInst_.CalculateSize(_repeated_execInst_codec);
      if (TimeInForce.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TimeInForce);
      }
      if (TransactTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TransactTime);
      }
      if (ExecId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExecId);
      }
      if (ExecType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExecType);
      }
      if (ExecRestatementReason.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExecRestatementReason);
      }
      if (TradeId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TradeId);
      }
      if (OrdStatus.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrdStatus);
      }
      if (OrdRejReason.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrdRejReason);
      }
      if (Side.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Side);
      }
      if (OrderQty.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrderQty);
      }
      if (LeavesQty.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LeavesQty);
      }
      if (CumQty.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CumQty);
      }
      if (LastQty.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LastQty);
      }
      if (CapPrice.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CapPrice);
      }
      if (LastPx.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LastPx);
      }
      if (AvgPx.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvgPx);
      }
      if (CalculatedCcyLastQty.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CalculatedCcyLastQty);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (SettlCurrency.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SettlCurrency);
      }
      if (SettlType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SettlType);
      }
      if (NetMoney.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NetMoney);
      }
      if (LastLiquidityInd.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LastLiquidityInd);
      }
      if (Commission.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Commission);
      }
      if (CommRate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CommRate);
      }
      if (CommCurrency.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CommCurrency);
      }
      if (RejectText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RejectText);
      }
      if (PegPriceType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PegPriceType);
      }
      if (PegOffsetType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PegOffsetType);
      }
      if (PegOffsetValue.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PegOffsetValue);
      }
      if (PositionId != 0UL) {
        size += 3 + pb::CodedOutputStream.ComputeUInt64Size(PositionId);
      }
      if (PositionEffect.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PositionEffect);
      }
      if (MarginAmt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MarginAmt);
      }
      if (MarginAmtType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MarginAmtType);
      }
      if (MarginAmtCcy.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MarginAmtCcy);
      }
      size += sLTP_.CalculateSize(_repeated_sLTP_codec);
      if (Text.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecutionReport other) {
      if (other == null) {
        return;
      }
      if (other.MsgType.Length != 0) {
        MsgType = other.MsgType;
      }
      if (other.OrdStatusReqID.Length != 0) {
        OrdStatusReqID = other.OrdStatusReqID;
      }
      if (other.Account != 0UL) {
        Account = other.Account;
      }
      if (other.ClOrdId.Length != 0) {
        ClOrdId = other.ClOrdId;
      }
      if (other.OrigClOrdId.Length != 0) {
        OrigClOrdId = other.OrigClOrdId;
      }
      if (other.OrderId.Length != 0) {
        OrderId = other.OrderId;
      }
      if (other.ListId.Length != 0) {
        ListId = other.ListId;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.OrdType.Length != 0) {
        OrdType = other.OrdType;
      }
      if (other.Price.Length != 0) {
        Price = other.Price;
      }
      if (other.StopPx.Length != 0) {
        StopPx = other.StopPx;
      }
      execInst_.Add(other.execInst_);
      if (other.TimeInForce.Length != 0) {
        TimeInForce = other.TimeInForce;
      }
      if (other.TransactTime != 0L) {
        TransactTime = other.TransactTime;
      }
      if (other.ExecId.Length != 0) {
        ExecId = other.ExecId;
      }
      if (other.ExecType.Length != 0) {
        ExecType = other.ExecType;
      }
      if (other.ExecRestatementReason.Length != 0) {
        ExecRestatementReason = other.ExecRestatementReason;
      }
      if (other.TradeId.Length != 0) {
        TradeId = other.TradeId;
      }
      if (other.OrdStatus.Length != 0) {
        OrdStatus = other.OrdStatus;
      }
      if (other.OrdRejReason.Length != 0) {
        OrdRejReason = other.OrdRejReason;
      }
      if (other.Side.Length != 0) {
        Side = other.Side;
      }
      if (other.OrderQty.Length != 0) {
        OrderQty = other.OrderQty;
      }
      if (other.LeavesQty.Length != 0) {
        LeavesQty = other.LeavesQty;
      }
      if (other.CumQty.Length != 0) {
        CumQty = other.CumQty;
      }
      if (other.LastQty.Length != 0) {
        LastQty = other.LastQty;
      }
      if (other.CapPrice.Length != 0) {
        CapPrice = other.CapPrice;
      }
      if (other.LastPx.Length != 0) {
        LastPx = other.LastPx;
      }
      if (other.AvgPx.Length != 0) {
        AvgPx = other.AvgPx;
      }
      if (other.CalculatedCcyLastQty.Length != 0) {
        CalculatedCcyLastQty = other.CalculatedCcyLastQty;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.SettlCurrency.Length != 0) {
        SettlCurrency = other.SettlCurrency;
      }
      if (other.SettlType.Length != 0) {
        SettlType = other.SettlType;
      }
      if (other.NetMoney.Length != 0) {
        NetMoney = other.NetMoney;
      }
      if (other.LastLiquidityInd.Length != 0) {
        LastLiquidityInd = other.LastLiquidityInd;
      }
      if (other.Commission.Length != 0) {
        Commission = other.Commission;
      }
      if (other.CommRate.Length != 0) {
        CommRate = other.CommRate;
      }
      if (other.CommCurrency.Length != 0) {
        CommCurrency = other.CommCurrency;
      }
      if (other.RejectText.Length != 0) {
        RejectText = other.RejectText;
      }
      if (other.PegPriceType.Length != 0) {
        PegPriceType = other.PegPriceType;
      }
      if (other.PegOffsetType.Length != 0) {
        PegOffsetType = other.PegOffsetType;
      }
      if (other.PegOffsetValue.Length != 0) {
        PegOffsetValue = other.PegOffsetValue;
      }
      if (other.PositionId != 0UL) {
        PositionId = other.PositionId;
      }
      if (other.PositionEffect.Length != 0) {
        PositionEffect = other.PositionEffect;
      }
      if (other.MarginAmt.Length != 0) {
        MarginAmt = other.MarginAmt;
      }
      if (other.MarginAmtType.Length != 0) {
        MarginAmtType = other.MarginAmtType;
      }
      if (other.MarginAmtCcy.Length != 0) {
        MarginAmtCcy = other.MarginAmtCcy;
      }
      sLTP_.Add(other.sLTP_);
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Account = input.ReadUInt64();
            break;
          }
          case 50: {
            AvgPx = input.ReadString();
            break;
          }
          case 90: {
            ClOrdId = input.ReadString();
            break;
          }
          case 98: {
            Commission = input.ReadString();
            break;
          }
          case 114: {
            CumQty = input.ReadString();
            break;
          }
          case 122: {
            Currency = input.ReadString();
            break;
          }
          case 138: {
            ExecId = input.ReadString();
            break;
          }
          case 146: {
            execInst_.AddEntriesFrom(input, _repeated_execInst_codec);
            break;
          }
          case 250: {
            LastPx = input.ReadString();
            break;
          }
          case 258: {
            LastQty = input.ReadString();
            break;
          }
          case 282: {
            MsgType = input.ReadString();
            break;
          }
          case 298: {
            OrderId = input.ReadString();
            break;
          }
          case 306: {
            OrderQty = input.ReadString();
            break;
          }
          case 314: {
            OrdStatus = input.ReadString();
            break;
          }
          case 322: {
            OrdType = input.ReadString();
            break;
          }
          case 330: {
            OrigClOrdId = input.ReadString();
            break;
          }
          case 354: {
            Price = input.ReadString();
            break;
          }
          case 434: {
            Side = input.ReadString();
            break;
          }
          case 442: {
            Symbol = input.ReadString();
            break;
          }
          case 466: {
            Text = input.ReadString();
            break;
          }
          case 474: {
            TimeInForce = input.ReadString();
            break;
          }
          case 480: {
            TransactTime = input.ReadInt64();
            break;
          }
          case 506: {
            SettlType = input.ReadString();
            break;
          }
          case 530: {
            ListId = input.ReadString();
            break;
          }
          case 618: {
            PositionEffect = input.ReadString();
            break;
          }
          case 794: {
            StopPx = input.ReadString();
            break;
          }
          case 826: {
            OrdRejReason = input.ReadString();
            break;
          }
          case 946: {
            NetMoney = input.ReadString();
            break;
          }
          case 962: {
            SettlCurrency = input.ReadString();
            break;
          }
          case 1202: {
            ExecType = input.ReadString();
            break;
          }
          case 1210: {
            LeavesQty = input.ReadString();
            break;
          }
          case 1690: {
            PegOffsetValue = input.ReadString();
            break;
          }
          case 3026: {
            ExecRestatementReason = input.ReadString();
            break;
          }
          case 3834: {
            CommCurrency = input.ReadString();
            break;
          }
          case 6322: {
            OrdStatusReqID = input.ReadString();
            break;
          }
          case 6690: {
            PegOffsetType = input.ReadString();
            break;
          }
          case 6810: {
            LastLiquidityInd = input.ReadString();
            break;
          }
          case 8026: {
            TradeId = input.ReadString();
            break;
          }
          case 8450: {
            CalculatedCcyLastQty = input.ReadString();
            break;
          }
          case 8754: {
            PegPriceType = input.ReadString();
            break;
          }
          case 9594: {
            CapPrice = input.ReadString();
            break;
          }
          case 9866: {
            CommRate = input.ReadString();
            break;
          }
          case 10626: {
            RejectText = input.ReadString();
            break;
          }
          case 13154: {
            MarginAmtType = input.ReadString();
            break;
          }
          case 13162: {
            MarginAmt = input.ReadString();
            break;
          }
          case 13170: {
            MarginAmtCcy = input.ReadString();
            break;
          }
          case 20944: {
            PositionId = input.ReadUInt64();
            break;
          }
          case 40002: {
            sLTP_.AddEntriesFrom(input, _repeated_sLTP_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OrderCancelRequest : pb::IMessage<OrderCancelRequest> {
    private static readonly pb::MessageParser<OrderCancelRequest> _parser = new pb::MessageParser<OrderCancelRequest>(() => new OrderCancelRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderCancelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.OrderReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderCancelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderCancelRequest(OrderCancelRequest other) : this() {
      msgType_ = other.msgType_;
      clOrdId_ = other.clOrdId_;
      origClOrdId_ = other.origClOrdId_;
      orderId_ = other.orderId_;
      symbol_ = other.symbol_;
      side_ = other.side_;
      transactTime_ = other.transactTime_;
      account_ = other.account_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderCancelRequest Clone() {
      return new OrderCancelRequest(this);
    }

    /// <summary>Field number for the "MsgType" field.</summary>
    public const int MsgTypeFieldNumber = 35;
    private string msgType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgType {
      get { return msgType_; }
      set {
        msgType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClOrdId" field.</summary>
    public const int ClOrdIdFieldNumber = 11;
    private string clOrdId_ = "";
    /// <summary>
    /// Request ID unique for Account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClOrdId {
      get { return clOrdId_; }
      set {
        clOrdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrigClOrdId" field.</summary>
    public const int OrigClOrdIdFieldNumber = 41;
    private string origClOrdId_ = "";
    /// <summary>
    /// Client Order ID (ClOrdId) of order to cancel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrigClOrdId {
      get { return origClOrdId_; }
      set {
        origClOrdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrderId" field.</summary>
    public const int OrderIdFieldNumber = 37;
    private string orderId_ = "";
    /// <summary>
    /// Unique order ID across the exchange.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 55;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Side" field.</summary>
    public const int SideFieldNumber = 54;
    private string side_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Side {
      get { return side_; }
      set {
        side_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TransactTime" field.</summary>
    public const int TransactTimeFieldNumber = 60;
    private long transactTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactTime {
      get { return transactTime_; }
      set {
        transactTime_ = value;
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 1;
    private ulong account_;
    /// <summary>
    /// Unique client ID across exchange.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderCancelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderCancelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (ClOrdId != other.ClOrdId) return false;
      if (OrigClOrdId != other.OrigClOrdId) return false;
      if (OrderId != other.OrderId) return false;
      if (Symbol != other.Symbol) return false;
      if (Side != other.Side) return false;
      if (TransactTime != other.TransactTime) return false;
      if (Account != other.Account) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType.Length != 0) hash ^= MsgType.GetHashCode();
      if (ClOrdId.Length != 0) hash ^= ClOrdId.GetHashCode();
      if (OrigClOrdId.Length != 0) hash ^= OrigClOrdId.GetHashCode();
      if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Side.Length != 0) hash ^= Side.GetHashCode();
      if (TransactTime != 0L) hash ^= TransactTime.GetHashCode();
      if (Account != 0UL) hash ^= Account.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Account);
      }
      if (ClOrdId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ClOrdId);
      }
      if (MsgType.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(MsgType);
      }
      if (OrderId.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(OrderId);
      }
      if (OrigClOrdId.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(OrigClOrdId);
      }
      if (Side.Length != 0) {
        output.WriteRawTag(178, 3);
        output.WriteString(Side);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteString(Symbol);
      }
      if (TransactTime != 0L) {
        output.WriteRawTag(224, 3);
        output.WriteInt64(TransactTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MsgType);
      }
      if (ClOrdId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClOrdId);
      }
      if (OrigClOrdId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrigClOrdId);
      }
      if (OrderId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (Symbol.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Side.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Side);
      }
      if (TransactTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TransactTime);
      }
      if (Account != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Account);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderCancelRequest other) {
      if (other == null) {
        return;
      }
      if (other.MsgType.Length != 0) {
        MsgType = other.MsgType;
      }
      if (other.ClOrdId.Length != 0) {
        ClOrdId = other.ClOrdId;
      }
      if (other.OrigClOrdId.Length != 0) {
        OrigClOrdId = other.OrigClOrdId;
      }
      if (other.OrderId.Length != 0) {
        OrderId = other.OrderId;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Side.Length != 0) {
        Side = other.Side;
      }
      if (other.TransactTime != 0L) {
        TransactTime = other.TransactTime;
      }
      if (other.Account != 0UL) {
        Account = other.Account;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Account = input.ReadUInt64();
            break;
          }
          case 90: {
            ClOrdId = input.ReadString();
            break;
          }
          case 282: {
            MsgType = input.ReadString();
            break;
          }
          case 298: {
            OrderId = input.ReadString();
            break;
          }
          case 330: {
            OrigClOrdId = input.ReadString();
            break;
          }
          case 434: {
            Side = input.ReadString();
            break;
          }
          case 442: {
            Symbol = input.ReadString();
            break;
          }
          case 480: {
            TransactTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OrderCancelReject : pb::IMessage<OrderCancelReject> {
    private static readonly pb::MessageParser<OrderCancelReject> _parser = new pb::MessageParser<OrderCancelReject>(() => new OrderCancelReject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderCancelReject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.OrderReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderCancelReject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderCancelReject(OrderCancelReject other) : this() {
      msgType_ = other.msgType_;
      account_ = other.account_;
      symbol_ = other.symbol_;
      clOrdId_ = other.clOrdId_;
      origClOrdId_ = other.origClOrdId_;
      orderId_ = other.orderId_;
      ordStatus_ = other.ordStatus_;
      cxlRejResponseTo_ = other.cxlRejResponseTo_;
      cxlRejReason_ = other.cxlRejReason_;
      rejectText_ = other.rejectText_;
      transactTime_ = other.transactTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderCancelReject Clone() {
      return new OrderCancelReject(this);
    }

    /// <summary>Field number for the "MsgType" field.</summary>
    public const int MsgTypeFieldNumber = 35;
    private string msgType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgType {
      get { return msgType_; }
      set {
        msgType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 1;
    private ulong account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 55;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClOrdId" field.</summary>
    public const int ClOrdIdFieldNumber = 11;
    private string clOrdId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClOrdId {
      get { return clOrdId_; }
      set {
        clOrdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrigClOrdId" field.</summary>
    public const int OrigClOrdIdFieldNumber = 41;
    private string origClOrdId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrigClOrdId {
      get { return origClOrdId_; }
      set {
        origClOrdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrderId" field.</summary>
    public const int OrderIdFieldNumber = 37;
    private string orderId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrdStatus" field.</summary>
    public const int OrdStatusFieldNumber = 39;
    private string ordStatus_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrdStatus {
      get { return ordStatus_; }
      set {
        ordStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CxlRejResponseTo" field.</summary>
    public const int CxlRejResponseToFieldNumber = 434;
    private string cxlRejResponseTo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CxlRejResponseTo {
      get { return cxlRejResponseTo_; }
      set {
        cxlRejResponseTo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CxlRejReason" field.</summary>
    public const int CxlRejReasonFieldNumber = 102;
    private string cxlRejReason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CxlRejReason {
      get { return cxlRejReason_; }
      set {
        cxlRejReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RejectText" field.</summary>
    public const int RejectTextFieldNumber = 1328;
    private string rejectText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RejectText {
      get { return rejectText_; }
      set {
        rejectText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TransactTime" field.</summary>
    public const int TransactTimeFieldNumber = 60;
    private long transactTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactTime {
      get { return transactTime_; }
      set {
        transactTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderCancelReject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderCancelReject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (Account != other.Account) return false;
      if (Symbol != other.Symbol) return false;
      if (ClOrdId != other.ClOrdId) return false;
      if (OrigClOrdId != other.OrigClOrdId) return false;
      if (OrderId != other.OrderId) return false;
      if (OrdStatus != other.OrdStatus) return false;
      if (CxlRejResponseTo != other.CxlRejResponseTo) return false;
      if (CxlRejReason != other.CxlRejReason) return false;
      if (RejectText != other.RejectText) return false;
      if (TransactTime != other.TransactTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType.Length != 0) hash ^= MsgType.GetHashCode();
      if (Account != 0UL) hash ^= Account.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (ClOrdId.Length != 0) hash ^= ClOrdId.GetHashCode();
      if (OrigClOrdId.Length != 0) hash ^= OrigClOrdId.GetHashCode();
      if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
      if (OrdStatus.Length != 0) hash ^= OrdStatus.GetHashCode();
      if (CxlRejResponseTo.Length != 0) hash ^= CxlRejResponseTo.GetHashCode();
      if (CxlRejReason.Length != 0) hash ^= CxlRejReason.GetHashCode();
      if (RejectText.Length != 0) hash ^= RejectText.GetHashCode();
      if (TransactTime != 0L) hash ^= TransactTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Account);
      }
      if (ClOrdId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ClOrdId);
      }
      if (MsgType.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(MsgType);
      }
      if (OrderId.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(OrderId);
      }
      if (OrdStatus.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(OrdStatus);
      }
      if (OrigClOrdId.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(OrigClOrdId);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteString(Symbol);
      }
      if (TransactTime != 0L) {
        output.WriteRawTag(224, 3);
        output.WriteInt64(TransactTime);
      }
      if (CxlRejReason.Length != 0) {
        output.WriteRawTag(178, 6);
        output.WriteString(CxlRejReason);
      }
      if (CxlRejResponseTo.Length != 0) {
        output.WriteRawTag(146, 27);
        output.WriteString(CxlRejResponseTo);
      }
      if (RejectText.Length != 0) {
        output.WriteRawTag(130, 83);
        output.WriteString(RejectText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MsgType);
      }
      if (Account != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Account);
      }
      if (Symbol.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (ClOrdId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClOrdId);
      }
      if (OrigClOrdId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrigClOrdId);
      }
      if (OrderId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (OrdStatus.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrdStatus);
      }
      if (CxlRejResponseTo.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CxlRejResponseTo);
      }
      if (CxlRejReason.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CxlRejReason);
      }
      if (RejectText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RejectText);
      }
      if (TransactTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TransactTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderCancelReject other) {
      if (other == null) {
        return;
      }
      if (other.MsgType.Length != 0) {
        MsgType = other.MsgType;
      }
      if (other.Account != 0UL) {
        Account = other.Account;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.ClOrdId.Length != 0) {
        ClOrdId = other.ClOrdId;
      }
      if (other.OrigClOrdId.Length != 0) {
        OrigClOrdId = other.OrigClOrdId;
      }
      if (other.OrderId.Length != 0) {
        OrderId = other.OrderId;
      }
      if (other.OrdStatus.Length != 0) {
        OrdStatus = other.OrdStatus;
      }
      if (other.CxlRejResponseTo.Length != 0) {
        CxlRejResponseTo = other.CxlRejResponseTo;
      }
      if (other.CxlRejReason.Length != 0) {
        CxlRejReason = other.CxlRejReason;
      }
      if (other.RejectText.Length != 0) {
        RejectText = other.RejectText;
      }
      if (other.TransactTime != 0L) {
        TransactTime = other.TransactTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Account = input.ReadUInt64();
            break;
          }
          case 90: {
            ClOrdId = input.ReadString();
            break;
          }
          case 282: {
            MsgType = input.ReadString();
            break;
          }
          case 298: {
            OrderId = input.ReadString();
            break;
          }
          case 314: {
            OrdStatus = input.ReadString();
            break;
          }
          case 330: {
            OrigClOrdId = input.ReadString();
            break;
          }
          case 442: {
            Symbol = input.ReadString();
            break;
          }
          case 480: {
            TransactTime = input.ReadInt64();
            break;
          }
          case 818: {
            CxlRejReason = input.ReadString();
            break;
          }
          case 3474: {
            CxlRejResponseTo = input.ReadString();
            break;
          }
          case 10626: {
            RejectText = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OrderMassCancelRequest : pb::IMessage<OrderMassCancelRequest> {
    private static readonly pb::MessageParser<OrderMassCancelRequest> _parser = new pb::MessageParser<OrderMassCancelRequest>(() => new OrderMassCancelRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderMassCancelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.OrderReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderMassCancelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderMassCancelRequest(OrderMassCancelRequest other) : this() {
      msgType_ = other.msgType_;
      clOrdId_ = other.clOrdId_;
      massCancelRequestType_ = other.massCancelRequestType_;
      symbol_ = other.symbol_;
      side_ = other.side_;
      positionEffect_ = other.positionEffect_;
      account_ = other.account_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderMassCancelRequest Clone() {
      return new OrderMassCancelRequest(this);
    }

    /// <summary>Field number for the "MsgType" field.</summary>
    public const int MsgTypeFieldNumber = 35;
    private string msgType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgType {
      get { return msgType_; }
      set {
        msgType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClOrdId" field.</summary>
    public const int ClOrdIdFieldNumber = 11;
    private string clOrdId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClOrdId {
      get { return clOrdId_; }
      set {
        clOrdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MassCancelRequestType" field.</summary>
    public const int MassCancelRequestTypeFieldNumber = 530;
    private string massCancelRequestType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MassCancelRequestType {
      get { return massCancelRequestType_; }
      set {
        massCancelRequestType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 55;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Side" field.</summary>
    public const int SideFieldNumber = 54;
    private string side_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Side {
      get { return side_; }
      set {
        side_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PositionEffect" field.</summary>
    public const int PositionEffectFieldNumber = 77;
    private string positionEffect_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PositionEffect {
      get { return positionEffect_; }
      set {
        positionEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 1;
    private ulong account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderMassCancelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderMassCancelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (ClOrdId != other.ClOrdId) return false;
      if (MassCancelRequestType != other.MassCancelRequestType) return false;
      if (Symbol != other.Symbol) return false;
      if (Side != other.Side) return false;
      if (PositionEffect != other.PositionEffect) return false;
      if (Account != other.Account) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType.Length != 0) hash ^= MsgType.GetHashCode();
      if (ClOrdId.Length != 0) hash ^= ClOrdId.GetHashCode();
      if (MassCancelRequestType.Length != 0) hash ^= MassCancelRequestType.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Side.Length != 0) hash ^= Side.GetHashCode();
      if (PositionEffect.Length != 0) hash ^= PositionEffect.GetHashCode();
      if (Account != 0UL) hash ^= Account.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Account);
      }
      if (ClOrdId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ClOrdId);
      }
      if (MsgType.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(MsgType);
      }
      if (Side.Length != 0) {
        output.WriteRawTag(178, 3);
        output.WriteString(Side);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteString(Symbol);
      }
      if (PositionEffect.Length != 0) {
        output.WriteRawTag(234, 4);
        output.WriteString(PositionEffect);
      }
      if (MassCancelRequestType.Length != 0) {
        output.WriteRawTag(146, 33);
        output.WriteString(MassCancelRequestType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MsgType);
      }
      if (ClOrdId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClOrdId);
      }
      if (MassCancelRequestType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MassCancelRequestType);
      }
      if (Symbol.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Side.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Side);
      }
      if (PositionEffect.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PositionEffect);
      }
      if (Account != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Account);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderMassCancelRequest other) {
      if (other == null) {
        return;
      }
      if (other.MsgType.Length != 0) {
        MsgType = other.MsgType;
      }
      if (other.ClOrdId.Length != 0) {
        ClOrdId = other.ClOrdId;
      }
      if (other.MassCancelRequestType.Length != 0) {
        MassCancelRequestType = other.MassCancelRequestType;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Side.Length != 0) {
        Side = other.Side;
      }
      if (other.PositionEffect.Length != 0) {
        PositionEffect = other.PositionEffect;
      }
      if (other.Account != 0UL) {
        Account = other.Account;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Account = input.ReadUInt64();
            break;
          }
          case 90: {
            ClOrdId = input.ReadString();
            break;
          }
          case 282: {
            MsgType = input.ReadString();
            break;
          }
          case 434: {
            Side = input.ReadString();
            break;
          }
          case 442: {
            Symbol = input.ReadString();
            break;
          }
          case 618: {
            PositionEffect = input.ReadString();
            break;
          }
          case 4242: {
            MassCancelRequestType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OrderMassCancelReport : pb::IMessage<OrderMassCancelReport> {
    private static readonly pb::MessageParser<OrderMassCancelReport> _parser = new pb::MessageParser<OrderMassCancelReport>(() => new OrderMassCancelReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderMassCancelReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.OrderReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderMassCancelReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderMassCancelReport(OrderMassCancelReport other) : this() {
      msgType_ = other.msgType_;
      clOrdId_ = other.clOrdId_;
      massActionReportID_ = other.massActionReportID_;
      massCancelResponse_ = other.massCancelResponse_;
      massCancelRejectReason_ = other.massCancelRejectReason_;
      rejectText_ = other.rejectText_;
      symbol_ = other.symbol_;
      side_ = other.side_;
      transactTime_ = other.transactTime_;
      totalAffectedOrders_ = other.totalAffectedOrders_;
      account_ = other.account_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderMassCancelReport Clone() {
      return new OrderMassCancelReport(this);
    }

    /// <summary>Field number for the "MsgType" field.</summary>
    public const int MsgTypeFieldNumber = 35;
    private string msgType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgType {
      get { return msgType_; }
      set {
        msgType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClOrdId" field.</summary>
    public const int ClOrdIdFieldNumber = 11;
    private string clOrdId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClOrdId {
      get { return clOrdId_; }
      set {
        clOrdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MassActionReportID" field.</summary>
    public const int MassActionReportIDFieldNumber = 1369;
    private string massActionReportID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MassActionReportID {
      get { return massActionReportID_; }
      set {
        massActionReportID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MassCancelResponse" field.</summary>
    public const int MassCancelResponseFieldNumber = 531;
    private string massCancelResponse_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MassCancelResponse {
      get { return massCancelResponse_; }
      set {
        massCancelResponse_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MassCancelRejectReason" field.</summary>
    public const int MassCancelRejectReasonFieldNumber = 532;
    private string massCancelRejectReason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MassCancelRejectReason {
      get { return massCancelRejectReason_; }
      set {
        massCancelRejectReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RejectText" field.</summary>
    public const int RejectTextFieldNumber = 1328;
    private string rejectText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RejectText {
      get { return rejectText_; }
      set {
        rejectText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 55;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Side" field.</summary>
    public const int SideFieldNumber = 54;
    private string side_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Side {
      get { return side_; }
      set {
        side_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TransactTime" field.</summary>
    public const int TransactTimeFieldNumber = 60;
    private long transactTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactTime {
      get { return transactTime_; }
      set {
        transactTime_ = value;
      }
    }

    /// <summary>Field number for the "TotalAffectedOrders" field.</summary>
    public const int TotalAffectedOrdersFieldNumber = 533;
    private long totalAffectedOrders_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalAffectedOrders {
      get { return totalAffectedOrders_; }
      set {
        totalAffectedOrders_ = value;
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 1;
    private ulong account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderMassCancelReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderMassCancelReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (ClOrdId != other.ClOrdId) return false;
      if (MassActionReportID != other.MassActionReportID) return false;
      if (MassCancelResponse != other.MassCancelResponse) return false;
      if (MassCancelRejectReason != other.MassCancelRejectReason) return false;
      if (RejectText != other.RejectText) return false;
      if (Symbol != other.Symbol) return false;
      if (Side != other.Side) return false;
      if (TransactTime != other.TransactTime) return false;
      if (TotalAffectedOrders != other.TotalAffectedOrders) return false;
      if (Account != other.Account) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType.Length != 0) hash ^= MsgType.GetHashCode();
      if (ClOrdId.Length != 0) hash ^= ClOrdId.GetHashCode();
      if (MassActionReportID.Length != 0) hash ^= MassActionReportID.GetHashCode();
      if (MassCancelResponse.Length != 0) hash ^= MassCancelResponse.GetHashCode();
      if (MassCancelRejectReason.Length != 0) hash ^= MassCancelRejectReason.GetHashCode();
      if (RejectText.Length != 0) hash ^= RejectText.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Side.Length != 0) hash ^= Side.GetHashCode();
      if (TransactTime != 0L) hash ^= TransactTime.GetHashCode();
      if (TotalAffectedOrders != 0L) hash ^= TotalAffectedOrders.GetHashCode();
      if (Account != 0UL) hash ^= Account.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Account);
      }
      if (ClOrdId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ClOrdId);
      }
      if (MsgType.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(MsgType);
      }
      if (Side.Length != 0) {
        output.WriteRawTag(178, 3);
        output.WriteString(Side);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteString(Symbol);
      }
      if (TransactTime != 0L) {
        output.WriteRawTag(224, 3);
        output.WriteInt64(TransactTime);
      }
      if (MassCancelResponse.Length != 0) {
        output.WriteRawTag(154, 33);
        output.WriteString(MassCancelResponse);
      }
      if (MassCancelRejectReason.Length != 0) {
        output.WriteRawTag(162, 33);
        output.WriteString(MassCancelRejectReason);
      }
      if (TotalAffectedOrders != 0L) {
        output.WriteRawTag(168, 33);
        output.WriteInt64(TotalAffectedOrders);
      }
      if (RejectText.Length != 0) {
        output.WriteRawTag(130, 83);
        output.WriteString(RejectText);
      }
      if (MassActionReportID.Length != 0) {
        output.WriteRawTag(202, 85);
        output.WriteString(MassActionReportID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MsgType);
      }
      if (ClOrdId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClOrdId);
      }
      if (MassActionReportID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MassActionReportID);
      }
      if (MassCancelResponse.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MassCancelResponse);
      }
      if (MassCancelRejectReason.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MassCancelRejectReason);
      }
      if (RejectText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RejectText);
      }
      if (Symbol.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Side.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Side);
      }
      if (TransactTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TransactTime);
      }
      if (TotalAffectedOrders != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TotalAffectedOrders);
      }
      if (Account != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Account);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderMassCancelReport other) {
      if (other == null) {
        return;
      }
      if (other.MsgType.Length != 0) {
        MsgType = other.MsgType;
      }
      if (other.ClOrdId.Length != 0) {
        ClOrdId = other.ClOrdId;
      }
      if (other.MassActionReportID.Length != 0) {
        MassActionReportID = other.MassActionReportID;
      }
      if (other.MassCancelResponse.Length != 0) {
        MassCancelResponse = other.MassCancelResponse;
      }
      if (other.MassCancelRejectReason.Length != 0) {
        MassCancelRejectReason = other.MassCancelRejectReason;
      }
      if (other.RejectText.Length != 0) {
        RejectText = other.RejectText;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Side.Length != 0) {
        Side = other.Side;
      }
      if (other.TransactTime != 0L) {
        TransactTime = other.TransactTime;
      }
      if (other.TotalAffectedOrders != 0L) {
        TotalAffectedOrders = other.TotalAffectedOrders;
      }
      if (other.Account != 0UL) {
        Account = other.Account;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Account = input.ReadUInt64();
            break;
          }
          case 90: {
            ClOrdId = input.ReadString();
            break;
          }
          case 282: {
            MsgType = input.ReadString();
            break;
          }
          case 434: {
            Side = input.ReadString();
            break;
          }
          case 442: {
            Symbol = input.ReadString();
            break;
          }
          case 480: {
            TransactTime = input.ReadInt64();
            break;
          }
          case 4250: {
            MassCancelResponse = input.ReadString();
            break;
          }
          case 4258: {
            MassCancelRejectReason = input.ReadString();
            break;
          }
          case 4264: {
            TotalAffectedOrders = input.ReadInt64();
            break;
          }
          case 10626: {
            RejectText = input.ReadString();
            break;
          }
          case 10954: {
            MassActionReportID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Reject : pb::IMessage<Reject> {
    private static readonly pb::MessageParser<Reject> _parser = new pb::MessageParser<Reject>(() => new Reject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.OrderReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reject(Reject other) : this() {
      msgType_ = other.msgType_;
      rejectReason_ = other.rejectReason_;
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reject Clone() {
      return new Reject(this);
    }

    /// <summary>Field number for the "MsgType" field.</summary>
    public const int MsgTypeFieldNumber = 35;
    private string msgType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgType {
      get { return msgType_; }
      set {
        msgType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RejectReason" field.</summary>
    public const int RejectReasonFieldNumber = 380;
    private string rejectReason_ = "";
    /// <summary>
    /// BusinessRejectReason
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RejectReason {
      get { return rejectReason_; }
      set {
        rejectReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Text" field.</summary>
    public const int TextFieldNumber = 58;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (RejectReason != other.RejectReason) return false;
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType.Length != 0) hash ^= MsgType.GetHashCode();
      if (RejectReason.Length != 0) hash ^= RejectReason.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MsgType.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(MsgType);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(210, 3);
        output.WriteString(Text);
      }
      if (RejectReason.Length != 0) {
        output.WriteRawTag(226, 23);
        output.WriteString(RejectReason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MsgType);
      }
      if (RejectReason.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RejectReason);
      }
      if (Text.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reject other) {
      if (other == null) {
        return;
      }
      if (other.MsgType.Length != 0) {
        MsgType = other.MsgType;
      }
      if (other.RejectReason.Length != 0) {
        RejectReason = other.RejectReason;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 282: {
            MsgType = input.ReadString();
            break;
          }
          case 466: {
            Text = input.ReadString();
            break;
          }
          case 3042: {
            RejectReason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OrderStatusRequest : pb::IMessage<OrderStatusRequest> {
    private static readonly pb::MessageParser<OrderStatusRequest> _parser = new pb::MessageParser<OrderStatusRequest>(() => new OrderStatusRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.OrderReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderStatusRequest(OrderStatusRequest other) : this() {
      msgType_ = other.msgType_;
      ordStatusReqId_ = other.ordStatusReqId_;
      account_ = other.account_;
      clOrdId_ = other.clOrdId_;
      orderId_ = other.orderId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderStatusRequest Clone() {
      return new OrderStatusRequest(this);
    }

    /// <summary>Field number for the "MsgType" field.</summary>
    public const int MsgTypeFieldNumber = 35;
    private string msgType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgType {
      get { return msgType_; }
      set {
        msgType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrdStatusReqId" field.</summary>
    public const int OrdStatusReqIdFieldNumber = 790;
    private string ordStatusReqId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrdStatusReqId {
      get { return ordStatusReqId_; }
      set {
        ordStatusReqId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 1;
    private ulong account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "ClOrdId" field.</summary>
    public const int ClOrdIdFieldNumber = 11;
    private string clOrdId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClOrdId {
      get { return clOrdId_; }
      set {
        clOrdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrderId" field.</summary>
    public const int OrderIdFieldNumber = 37;
    private string orderId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (OrdStatusReqId != other.OrdStatusReqId) return false;
      if (Account != other.Account) return false;
      if (ClOrdId != other.ClOrdId) return false;
      if (OrderId != other.OrderId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType.Length != 0) hash ^= MsgType.GetHashCode();
      if (OrdStatusReqId.Length != 0) hash ^= OrdStatusReqId.GetHashCode();
      if (Account != 0UL) hash ^= Account.GetHashCode();
      if (ClOrdId.Length != 0) hash ^= ClOrdId.GetHashCode();
      if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Account);
      }
      if (ClOrdId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ClOrdId);
      }
      if (MsgType.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(MsgType);
      }
      if (OrderId.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(OrderId);
      }
      if (OrdStatusReqId.Length != 0) {
        output.WriteRawTag(178, 49);
        output.WriteString(OrdStatusReqId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MsgType);
      }
      if (OrdStatusReqId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrdStatusReqId);
      }
      if (Account != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Account);
      }
      if (ClOrdId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClOrdId);
      }
      if (OrderId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderStatusRequest other) {
      if (other == null) {
        return;
      }
      if (other.MsgType.Length != 0) {
        MsgType = other.MsgType;
      }
      if (other.OrdStatusReqId.Length != 0) {
        OrdStatusReqId = other.OrdStatusReqId;
      }
      if (other.Account != 0UL) {
        Account = other.Account;
      }
      if (other.ClOrdId.Length != 0) {
        ClOrdId = other.ClOrdId;
      }
      if (other.OrderId.Length != 0) {
        OrderId = other.OrderId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Account = input.ReadUInt64();
            break;
          }
          case 90: {
            ClOrdId = input.ReadString();
            break;
          }
          case 282: {
            MsgType = input.ReadString();
            break;
          }
          case 298: {
            OrderId = input.ReadString();
            break;
          }
          case 6322: {
            OrdStatusReqId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OrderMassStatusRequest : pb::IMessage<OrderMassStatusRequest> {
    private static readonly pb::MessageParser<OrderMassStatusRequest> _parser = new pb::MessageParser<OrderMassStatusRequest>(() => new OrderMassStatusRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderMassStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.OrderReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderMassStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderMassStatusRequest(OrderMassStatusRequest other) : this() {
      msgType_ = other.msgType_;
      massStatusReqId_ = other.massStatusReqId_;
      massStatusReqType_ = other.massStatusReqType_;
      account_ = other.account_;
      symbol_ = other.symbol_;
      transactTime_ = other.transactTime_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderMassStatusRequest Clone() {
      return new OrderMassStatusRequest(this);
    }

    /// <summary>Field number for the "MsgType" field.</summary>
    public const int MsgTypeFieldNumber = 35;
    private string msgType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgType {
      get { return msgType_; }
      set {
        msgType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MassStatusReqId" field.</summary>
    public const int MassStatusReqIdFieldNumber = 584;
    private string massStatusReqId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MassStatusReqId {
      get { return massStatusReqId_; }
      set {
        massStatusReqId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MassStatusReqType" field.</summary>
    public const int MassStatusReqTypeFieldNumber = 585;
    private string massStatusReqType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MassStatusReqType {
      get { return massStatusReqType_; }
      set {
        massStatusReqType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 1;
    private ulong account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 55;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TransactTime" field.</summary>
    public const int TransactTimeFieldNumber = 580;
    private static readonly pb::FieldCodec<long> _repeated_transactTime_codec
        = pb::FieldCodec.ForInt64(4642);
    private readonly pbc::RepeatedField<long> transactTime_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> TransactTime {
      get { return transactTime_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderMassStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderMassStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (MassStatusReqId != other.MassStatusReqId) return false;
      if (MassStatusReqType != other.MassStatusReqType) return false;
      if (Account != other.Account) return false;
      if (Symbol != other.Symbol) return false;
      if(!transactTime_.Equals(other.transactTime_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType.Length != 0) hash ^= MsgType.GetHashCode();
      if (MassStatusReqId.Length != 0) hash ^= MassStatusReqId.GetHashCode();
      if (MassStatusReqType.Length != 0) hash ^= MassStatusReqType.GetHashCode();
      if (Account != 0UL) hash ^= Account.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      hash ^= transactTime_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Account);
      }
      if (MsgType.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(MsgType);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteString(Symbol);
      }
      transactTime_.WriteTo(output, _repeated_transactTime_codec);
      if (MassStatusReqId.Length != 0) {
        output.WriteRawTag(194, 36);
        output.WriteString(MassStatusReqId);
      }
      if (MassStatusReqType.Length != 0) {
        output.WriteRawTag(202, 36);
        output.WriteString(MassStatusReqType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MsgType);
      }
      if (MassStatusReqId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MassStatusReqId);
      }
      if (MassStatusReqType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MassStatusReqType);
      }
      if (Account != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Account);
      }
      if (Symbol.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      size += transactTime_.CalculateSize(_repeated_transactTime_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderMassStatusRequest other) {
      if (other == null) {
        return;
      }
      if (other.MsgType.Length != 0) {
        MsgType = other.MsgType;
      }
      if (other.MassStatusReqId.Length != 0) {
        MassStatusReqId = other.MassStatusReqId;
      }
      if (other.MassStatusReqType.Length != 0) {
        MassStatusReqType = other.MassStatusReqType;
      }
      if (other.Account != 0UL) {
        Account = other.Account;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      transactTime_.Add(other.transactTime_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Account = input.ReadUInt64();
            break;
          }
          case 282: {
            MsgType = input.ReadString();
            break;
          }
          case 442: {
            Symbol = input.ReadString();
            break;
          }
          case 4642:
          case 4640: {
            transactTime_.AddEntriesFrom(input, _repeated_transactTime_codec);
            break;
          }
          case 4674: {
            MassStatusReqId = input.ReadString();
            break;
          }
          case 4682: {
            MassStatusReqType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OrderMassStatusResponse : pb::IMessage<OrderMassStatusResponse> {
    private static readonly pb::MessageParser<OrderMassStatusResponse> _parser = new pb::MessageParser<OrderMassStatusResponse>(() => new OrderMassStatusResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderMassStatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.OrderReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderMassStatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderMassStatusResponse(OrderMassStatusResponse other) : this() {
      msgType_ = other.msgType_;
      massStatusReqId_ = other.massStatusReqId_;
      account_ = other.account_;
      executionReports_ = other.executionReports_.Clone();
      rejectReason_ = other.rejectReason_;
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderMassStatusResponse Clone() {
      return new OrderMassStatusResponse(this);
    }

    /// <summary>Field number for the "MsgType" field.</summary>
    public const int MsgTypeFieldNumber = 35;
    private string msgType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgType {
      get { return msgType_; }
      set {
        msgType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MassStatusReqId" field.</summary>
    public const int MassStatusReqIdFieldNumber = 584;
    private string massStatusReqId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MassStatusReqId {
      get { return massStatusReqId_; }
      set {
        massStatusReqId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 1;
    private ulong account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "ExecutionReports" field.</summary>
    public const int ExecutionReportsFieldNumber = 1268;
    private static readonly pb::FieldCodec<global::Api.ExecutionReport> _repeated_executionReports_codec
        = pb::FieldCodec.ForMessage(10146, global::Api.ExecutionReport.Parser);
    private readonly pbc::RepeatedField<global::Api.ExecutionReport> executionReports_ = new pbc::RepeatedField<global::Api.ExecutionReport>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Api.ExecutionReport> ExecutionReports {
      get { return executionReports_; }
    }

    /// <summary>Field number for the "RejectReason" field.</summary>
    public const int RejectReasonFieldNumber = 380;
    private string rejectReason_ = "";
    /// <summary>
    /// BusinessRejectReason
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RejectReason {
      get { return rejectReason_; }
      set {
        rejectReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Text" field.</summary>
    public const int TextFieldNumber = 58;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderMassStatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderMassStatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (MassStatusReqId != other.MassStatusReqId) return false;
      if (Account != other.Account) return false;
      if(!executionReports_.Equals(other.executionReports_)) return false;
      if (RejectReason != other.RejectReason) return false;
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType.Length != 0) hash ^= MsgType.GetHashCode();
      if (MassStatusReqId.Length != 0) hash ^= MassStatusReqId.GetHashCode();
      if (Account != 0UL) hash ^= Account.GetHashCode();
      hash ^= executionReports_.GetHashCode();
      if (RejectReason.Length != 0) hash ^= RejectReason.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Account);
      }
      if (MsgType.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(MsgType);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(210, 3);
        output.WriteString(Text);
      }
      if (RejectReason.Length != 0) {
        output.WriteRawTag(226, 23);
        output.WriteString(RejectReason);
      }
      if (MassStatusReqId.Length != 0) {
        output.WriteRawTag(194, 36);
        output.WriteString(MassStatusReqId);
      }
      executionReports_.WriteTo(output, _repeated_executionReports_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MsgType);
      }
      if (MassStatusReqId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MassStatusReqId);
      }
      if (Account != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Account);
      }
      size += executionReports_.CalculateSize(_repeated_executionReports_codec);
      if (RejectReason.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RejectReason);
      }
      if (Text.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderMassStatusResponse other) {
      if (other == null) {
        return;
      }
      if (other.MsgType.Length != 0) {
        MsgType = other.MsgType;
      }
      if (other.MassStatusReqId.Length != 0) {
        MassStatusReqId = other.MassStatusReqId;
      }
      if (other.Account != 0UL) {
        Account = other.Account;
      }
      executionReports_.Add(other.executionReports_);
      if (other.RejectReason.Length != 0) {
        RejectReason = other.RejectReason;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Account = input.ReadUInt64();
            break;
          }
          case 282: {
            MsgType = input.ReadString();
            break;
          }
          case 466: {
            Text = input.ReadString();
            break;
          }
          case 3042: {
            RejectReason = input.ReadString();
            break;
          }
          case 4674: {
            MassStatusReqId = input.ReadString();
            break;
          }
          case 10146: {
            executionReports_.AddEntriesFrom(input, _repeated_executionReports_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TradeCaptureReportRequest : pb::IMessage<TradeCaptureReportRequest> {
    private static readonly pb::MessageParser<TradeCaptureReportRequest> _parser = new pb::MessageParser<TradeCaptureReportRequest>(() => new TradeCaptureReportRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradeCaptureReportRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.OrderReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeCaptureReportRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeCaptureReportRequest(TradeCaptureReportRequest other) : this() {
      msgType_ = other.msgType_;
      tradeRequestID_ = other.tradeRequestID_;
      account_ = other.account_;
      symbol_ = other.symbol_;
      transactTime_ = other.transactTime_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeCaptureReportRequest Clone() {
      return new TradeCaptureReportRequest(this);
    }

    /// <summary>Field number for the "MsgType" field.</summary>
    public const int MsgTypeFieldNumber = 35;
    private string msgType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgType {
      get { return msgType_; }
      set {
        msgType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TradeRequestID" field.</summary>
    public const int TradeRequestIDFieldNumber = 568;
    private string tradeRequestID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeRequestID {
      get { return tradeRequestID_; }
      set {
        tradeRequestID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 1;
    private ulong account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 55;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TransactTime" field.</summary>
    public const int TransactTimeFieldNumber = 580;
    private static readonly pb::FieldCodec<long> _repeated_transactTime_codec
        = pb::FieldCodec.ForInt64(4642);
    private readonly pbc::RepeatedField<long> transactTime_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> TransactTime {
      get { return transactTime_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TradeCaptureReportRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TradeCaptureReportRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (TradeRequestID != other.TradeRequestID) return false;
      if (Account != other.Account) return false;
      if (Symbol != other.Symbol) return false;
      if(!transactTime_.Equals(other.transactTime_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType.Length != 0) hash ^= MsgType.GetHashCode();
      if (TradeRequestID.Length != 0) hash ^= TradeRequestID.GetHashCode();
      if (Account != 0UL) hash ^= Account.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      hash ^= transactTime_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Account);
      }
      if (MsgType.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(MsgType);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteString(Symbol);
      }
      if (TradeRequestID.Length != 0) {
        output.WriteRawTag(194, 35);
        output.WriteString(TradeRequestID);
      }
      transactTime_.WriteTo(output, _repeated_transactTime_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MsgType);
      }
      if (TradeRequestID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TradeRequestID);
      }
      if (Account != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Account);
      }
      if (Symbol.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      size += transactTime_.CalculateSize(_repeated_transactTime_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TradeCaptureReportRequest other) {
      if (other == null) {
        return;
      }
      if (other.MsgType.Length != 0) {
        MsgType = other.MsgType;
      }
      if (other.TradeRequestID.Length != 0) {
        TradeRequestID = other.TradeRequestID;
      }
      if (other.Account != 0UL) {
        Account = other.Account;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      transactTime_.Add(other.transactTime_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Account = input.ReadUInt64();
            break;
          }
          case 282: {
            MsgType = input.ReadString();
            break;
          }
          case 442: {
            Symbol = input.ReadString();
            break;
          }
          case 4546: {
            TradeRequestID = input.ReadString();
            break;
          }
          case 4642:
          case 4640: {
            transactTime_.AddEntriesFrom(input, _repeated_transactTime_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MassTradeCaptureReportResponse : pb::IMessage<MassTradeCaptureReportResponse> {
    private static readonly pb::MessageParser<MassTradeCaptureReportResponse> _parser = new pb::MessageParser<MassTradeCaptureReportResponse>(() => new MassTradeCaptureReportResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MassTradeCaptureReportResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.OrderReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MassTradeCaptureReportResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MassTradeCaptureReportResponse(MassTradeCaptureReportResponse other) : this() {
      msgType_ = other.msgType_;
      tradeRequestID_ = other.tradeRequestID_;
      account_ = other.account_;
      executionReports_ = other.executionReports_.Clone();
      rejectReason_ = other.rejectReason_;
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MassTradeCaptureReportResponse Clone() {
      return new MassTradeCaptureReportResponse(this);
    }

    /// <summary>Field number for the "MsgType" field.</summary>
    public const int MsgTypeFieldNumber = 35;
    private string msgType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgType {
      get { return msgType_; }
      set {
        msgType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TradeRequestID" field.</summary>
    public const int TradeRequestIDFieldNumber = 568;
    private string tradeRequestID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeRequestID {
      get { return tradeRequestID_; }
      set {
        tradeRequestID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 1;
    private ulong account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "ExecutionReports" field.</summary>
    public const int ExecutionReportsFieldNumber = 1268;
    private static readonly pb::FieldCodec<global::Api.ExecutionReport> _repeated_executionReports_codec
        = pb::FieldCodec.ForMessage(10146, global::Api.ExecutionReport.Parser);
    private readonly pbc::RepeatedField<global::Api.ExecutionReport> executionReports_ = new pbc::RepeatedField<global::Api.ExecutionReport>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Api.ExecutionReport> ExecutionReports {
      get { return executionReports_; }
    }

    /// <summary>Field number for the "RejectReason" field.</summary>
    public const int RejectReasonFieldNumber = 380;
    private string rejectReason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RejectReason {
      get { return rejectReason_; }
      set {
        rejectReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Text" field.</summary>
    public const int TextFieldNumber = 58;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MassTradeCaptureReportResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MassTradeCaptureReportResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (TradeRequestID != other.TradeRequestID) return false;
      if (Account != other.Account) return false;
      if(!executionReports_.Equals(other.executionReports_)) return false;
      if (RejectReason != other.RejectReason) return false;
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType.Length != 0) hash ^= MsgType.GetHashCode();
      if (TradeRequestID.Length != 0) hash ^= TradeRequestID.GetHashCode();
      if (Account != 0UL) hash ^= Account.GetHashCode();
      hash ^= executionReports_.GetHashCode();
      if (RejectReason.Length != 0) hash ^= RejectReason.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Account);
      }
      if (MsgType.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(MsgType);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(210, 3);
        output.WriteString(Text);
      }
      if (RejectReason.Length != 0) {
        output.WriteRawTag(226, 23);
        output.WriteString(RejectReason);
      }
      if (TradeRequestID.Length != 0) {
        output.WriteRawTag(194, 35);
        output.WriteString(TradeRequestID);
      }
      executionReports_.WriteTo(output, _repeated_executionReports_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MsgType);
      }
      if (TradeRequestID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TradeRequestID);
      }
      if (Account != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Account);
      }
      size += executionReports_.CalculateSize(_repeated_executionReports_codec);
      if (RejectReason.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RejectReason);
      }
      if (Text.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MassTradeCaptureReportResponse other) {
      if (other == null) {
        return;
      }
      if (other.MsgType.Length != 0) {
        MsgType = other.MsgType;
      }
      if (other.TradeRequestID.Length != 0) {
        TradeRequestID = other.TradeRequestID;
      }
      if (other.Account != 0UL) {
        Account = other.Account;
      }
      executionReports_.Add(other.executionReports_);
      if (other.RejectReason.Length != 0) {
        RejectReason = other.RejectReason;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Account = input.ReadUInt64();
            break;
          }
          case 282: {
            MsgType = input.ReadString();
            break;
          }
          case 466: {
            Text = input.ReadString();
            break;
          }
          case 3042: {
            RejectReason = input.ReadString();
            break;
          }
          case 4546: {
            TradeRequestID = input.ReadString();
            break;
          }
          case 10146: {
            executionReports_.AddEntriesFrom(input, _repeated_executionReports_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OrderCancelReplaceRequest : pb::IMessage<OrderCancelReplaceRequest> {
    private static readonly pb::MessageParser<OrderCancelReplaceRequest> _parser = new pb::MessageParser<OrderCancelReplaceRequest>(() => new OrderCancelReplaceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderCancelReplaceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.OrderReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderCancelReplaceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderCancelReplaceRequest(OrderCancelReplaceRequest other) : this() {
      msgType_ = other.msgType_;
      clOrdId_ = other.clOrdId_;
      origClOrdId_ = other.origClOrdId_;
      orderId_ = other.orderId_;
      symbol_ = other.symbol_;
      side_ = other.side_;
      transactTime_ = other.transactTime_;
      account_ = other.account_;
      execInst_ = other.execInst_.Clone();
      orderQty_ = other.orderQty_;
      price_ = other.price_;
      stopPx_ = other.stopPx_;
      capPrice_ = other.capPrice_;
      pegPriceType_ = other.pegPriceType_;
      pegOffsetType_ = other.pegOffsetType_;
      pegOffsetValue_ = other.pegOffsetValue_;
      sLTP_ = other.sLTP_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderCancelReplaceRequest Clone() {
      return new OrderCancelReplaceRequest(this);
    }

    /// <summary>Field number for the "MsgType" field.</summary>
    public const int MsgTypeFieldNumber = 35;
    private string msgType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgType {
      get { return msgType_; }
      set {
        msgType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClOrdId" field.</summary>
    public const int ClOrdIdFieldNumber = 11;
    private string clOrdId_ = "";
    /// <summary>
    /// Request ID unique for Account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClOrdId {
      get { return clOrdId_; }
      set {
        clOrdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrigClOrdId" field.</summary>
    public const int OrigClOrdIdFieldNumber = 41;
    private string origClOrdId_ = "";
    /// <summary>
    /// Client Order ID (ClOrdId) of order to modify
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrigClOrdId {
      get { return origClOrdId_; }
      set {
        origClOrdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrderId" field.</summary>
    public const int OrderIdFieldNumber = 37;
    private string orderId_ = "";
    /// <summary>
    /// Unique order ID across the exchange.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 55;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Side" field.</summary>
    public const int SideFieldNumber = 54;
    private string side_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Side {
      get { return side_; }
      set {
        side_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TransactTime" field.</summary>
    public const int TransactTimeFieldNumber = 60;
    private long transactTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactTime {
      get { return transactTime_; }
      set {
        transactTime_ = value;
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 1;
    private ulong account_;
    /// <summary>
    /// Unique client ID across exchange.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "ExecInst" field.</summary>
    public const int ExecInstFieldNumber = 18;
    private static readonly pb::FieldCodec<string> _repeated_execInst_codec
        = pb::FieldCodec.ForString(146);
    private readonly pbc::RepeatedField<string> execInst_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// New ExecInst
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ExecInst {
      get { return execInst_; }
    }

    /// <summary>Field number for the "OrderQty" field.</summary>
    public const int OrderQtyFieldNumber = 38;
    private string orderQty_ = "";
    /// <summary>
    /// New fields
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderQty {
      get { return orderQty_; }
      set {
        orderQty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 44;
    private string price_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Price {
      get { return price_; }
      set {
        price_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StopPx" field.</summary>
    public const int StopPxFieldNumber = 99;
    private string stopPx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StopPx {
      get { return stopPx_; }
      set {
        stopPx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CapPrice" field.</summary>
    public const int CapPriceFieldNumber = 1199;
    private string capPrice_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CapPrice {
      get { return capPrice_; }
      set {
        capPrice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PegPriceType" field.</summary>
    public const int PegPriceTypeFieldNumber = 1094;
    private string pegPriceType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PegPriceType {
      get { return pegPriceType_; }
      set {
        pegPriceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PegOffsetType" field.</summary>
    public const int PegOffsetTypeFieldNumber = 836;
    private string pegOffsetType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PegOffsetType {
      get { return pegOffsetType_; }
      set {
        pegOffsetType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PegOffsetValue" field.</summary>
    public const int PegOffsetValueFieldNumber = 211;
    private string pegOffsetValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PegOffsetValue {
      get { return pegOffsetValue_; }
      set {
        pegOffsetValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SLTP" field.</summary>
    public const int SLTPFieldNumber = 5000;
    private static readonly pb::FieldCodec<global::Api.SLTP> _repeated_sLTP_codec
        = pb::FieldCodec.ForMessage(40002, global::Api.SLTP.Parser);
    private readonly pbc::RepeatedField<global::Api.SLTP> sLTP_ = new pbc::RepeatedField<global::Api.SLTP>();
    /// <summary>
    /// Derivative SLTP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Api.SLTP> SLTP {
      get { return sLTP_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderCancelReplaceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderCancelReplaceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (ClOrdId != other.ClOrdId) return false;
      if (OrigClOrdId != other.OrigClOrdId) return false;
      if (OrderId != other.OrderId) return false;
      if (Symbol != other.Symbol) return false;
      if (Side != other.Side) return false;
      if (TransactTime != other.TransactTime) return false;
      if (Account != other.Account) return false;
      if(!execInst_.Equals(other.execInst_)) return false;
      if (OrderQty != other.OrderQty) return false;
      if (Price != other.Price) return false;
      if (StopPx != other.StopPx) return false;
      if (CapPrice != other.CapPrice) return false;
      if (PegPriceType != other.PegPriceType) return false;
      if (PegOffsetType != other.PegOffsetType) return false;
      if (PegOffsetValue != other.PegOffsetValue) return false;
      if(!sLTP_.Equals(other.sLTP_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType.Length != 0) hash ^= MsgType.GetHashCode();
      if (ClOrdId.Length != 0) hash ^= ClOrdId.GetHashCode();
      if (OrigClOrdId.Length != 0) hash ^= OrigClOrdId.GetHashCode();
      if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Side.Length != 0) hash ^= Side.GetHashCode();
      if (TransactTime != 0L) hash ^= TransactTime.GetHashCode();
      if (Account != 0UL) hash ^= Account.GetHashCode();
      hash ^= execInst_.GetHashCode();
      if (OrderQty.Length != 0) hash ^= OrderQty.GetHashCode();
      if (Price.Length != 0) hash ^= Price.GetHashCode();
      if (StopPx.Length != 0) hash ^= StopPx.GetHashCode();
      if (CapPrice.Length != 0) hash ^= CapPrice.GetHashCode();
      if (PegPriceType.Length != 0) hash ^= PegPriceType.GetHashCode();
      if (PegOffsetType.Length != 0) hash ^= PegOffsetType.GetHashCode();
      if (PegOffsetValue.Length != 0) hash ^= PegOffsetValue.GetHashCode();
      hash ^= sLTP_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Account);
      }
      if (ClOrdId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ClOrdId);
      }
      execInst_.WriteTo(output, _repeated_execInst_codec);
      if (MsgType.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(MsgType);
      }
      if (OrderId.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(OrderId);
      }
      if (OrderQty.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(OrderQty);
      }
      if (OrigClOrdId.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(OrigClOrdId);
      }
      if (Price.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(Price);
      }
      if (Side.Length != 0) {
        output.WriteRawTag(178, 3);
        output.WriteString(Side);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteString(Symbol);
      }
      if (TransactTime != 0L) {
        output.WriteRawTag(224, 3);
        output.WriteInt64(TransactTime);
      }
      if (StopPx.Length != 0) {
        output.WriteRawTag(154, 6);
        output.WriteString(StopPx);
      }
      if (PegOffsetValue.Length != 0) {
        output.WriteRawTag(154, 13);
        output.WriteString(PegOffsetValue);
      }
      if (PegOffsetType.Length != 0) {
        output.WriteRawTag(162, 52);
        output.WriteString(PegOffsetType);
      }
      if (PegPriceType.Length != 0) {
        output.WriteRawTag(178, 68);
        output.WriteString(PegPriceType);
      }
      if (CapPrice.Length != 0) {
        output.WriteRawTag(250, 74);
        output.WriteString(CapPrice);
      }
      sLTP_.WriteTo(output, _repeated_sLTP_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MsgType);
      }
      if (ClOrdId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClOrdId);
      }
      if (OrigClOrdId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrigClOrdId);
      }
      if (OrderId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (Symbol.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Side.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Side);
      }
      if (TransactTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TransactTime);
      }
      if (Account != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Account);
      }
      size += execInst_.CalculateSize(_repeated_execInst_codec);
      if (OrderQty.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrderQty);
      }
      if (Price.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Price);
      }
      if (StopPx.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StopPx);
      }
      if (CapPrice.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CapPrice);
      }
      if (PegPriceType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PegPriceType);
      }
      if (PegOffsetType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PegOffsetType);
      }
      if (PegOffsetValue.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PegOffsetValue);
      }
      size += sLTP_.CalculateSize(_repeated_sLTP_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderCancelReplaceRequest other) {
      if (other == null) {
        return;
      }
      if (other.MsgType.Length != 0) {
        MsgType = other.MsgType;
      }
      if (other.ClOrdId.Length != 0) {
        ClOrdId = other.ClOrdId;
      }
      if (other.OrigClOrdId.Length != 0) {
        OrigClOrdId = other.OrigClOrdId;
      }
      if (other.OrderId.Length != 0) {
        OrderId = other.OrderId;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Side.Length != 0) {
        Side = other.Side;
      }
      if (other.TransactTime != 0L) {
        TransactTime = other.TransactTime;
      }
      if (other.Account != 0UL) {
        Account = other.Account;
      }
      execInst_.Add(other.execInst_);
      if (other.OrderQty.Length != 0) {
        OrderQty = other.OrderQty;
      }
      if (other.Price.Length != 0) {
        Price = other.Price;
      }
      if (other.StopPx.Length != 0) {
        StopPx = other.StopPx;
      }
      if (other.CapPrice.Length != 0) {
        CapPrice = other.CapPrice;
      }
      if (other.PegPriceType.Length != 0) {
        PegPriceType = other.PegPriceType;
      }
      if (other.PegOffsetType.Length != 0) {
        PegOffsetType = other.PegOffsetType;
      }
      if (other.PegOffsetValue.Length != 0) {
        PegOffsetValue = other.PegOffsetValue;
      }
      sLTP_.Add(other.sLTP_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Account = input.ReadUInt64();
            break;
          }
          case 90: {
            ClOrdId = input.ReadString();
            break;
          }
          case 146: {
            execInst_.AddEntriesFrom(input, _repeated_execInst_codec);
            break;
          }
          case 282: {
            MsgType = input.ReadString();
            break;
          }
          case 298: {
            OrderId = input.ReadString();
            break;
          }
          case 306: {
            OrderQty = input.ReadString();
            break;
          }
          case 330: {
            OrigClOrdId = input.ReadString();
            break;
          }
          case 354: {
            Price = input.ReadString();
            break;
          }
          case 434: {
            Side = input.ReadString();
            break;
          }
          case 442: {
            Symbol = input.ReadString();
            break;
          }
          case 480: {
            TransactTime = input.ReadInt64();
            break;
          }
          case 794: {
            StopPx = input.ReadString();
            break;
          }
          case 1690: {
            PegOffsetValue = input.ReadString();
            break;
          }
          case 6690: {
            PegOffsetType = input.ReadString();
            break;
          }
          case 8754: {
            PegPriceType = input.ReadString();
            break;
          }
          case 9594: {
            CapPrice = input.ReadString();
            break;
          }
          case 40002: {
            sLTP_.AddEntriesFrom(input, _repeated_sLTP_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NewOrderList : pb::IMessage<NewOrderList> {
    private static readonly pb::MessageParser<NewOrderList> _parser = new pb::MessageParser<NewOrderList>(() => new NewOrderList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewOrderList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.OrderReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewOrderList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewOrderList(NewOrderList other) : this() {
      msgType_ = other.msgType_;
      listId_ = other.listId_;
      bidType_ = other.bidType_;
      totNoOrders_ = other.totNoOrders_;
      contingencyType_ = other.contingencyType_;
      listOrdGrp_ = other.listOrdGrp_.Clone();
      nestedListGrp_ = other.nestedListGrp_.Clone();
      symbol_ = other.symbol_;
      transactTime_ = other.transactTime_;
      account_ = other.account_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewOrderList Clone() {
      return new NewOrderList(this);
    }

    /// <summary>Field number for the "MsgType" field.</summary>
    public const int MsgTypeFieldNumber = 35;
    private string msgType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgType {
      get { return msgType_; }
      set {
        msgType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ListId" field.</summary>
    public const int ListIdFieldNumber = 66;
    private string listId_ = "";
    /// <summary>
    /// List ID unique for Account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ListId {
      get { return listId_; }
      set {
        listId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BidType" field.</summary>
    public const int BidTypeFieldNumber = 394;
    private string bidType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BidType {
      get { return bidType_; }
      set {
        bidType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TotNoOrders" field.</summary>
    public const int TotNoOrdersFieldNumber = 68;
    private int totNoOrders_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotNoOrders {
      get { return totNoOrders_; }
      set {
        totNoOrders_ = value;
      }
    }

    /// <summary>Field number for the "ContingencyType" field.</summary>
    public const int ContingencyTypeFieldNumber = 1385;
    private string contingencyType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContingencyType {
      get { return contingencyType_; }
      set {
        contingencyType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ListOrdGrp" field.</summary>
    public const int ListOrdGrpFieldNumber = 73;
    private static readonly pb::FieldCodec<global::Api.NewOrderSingle> _repeated_listOrdGrp_codec
        = pb::FieldCodec.ForMessage(586, global::Api.NewOrderSingle.Parser);
    private readonly pbc::RepeatedField<global::Api.NewOrderSingle> listOrdGrp_ = new pbc::RepeatedField<global::Api.NewOrderSingle>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Api.NewOrderSingle> ListOrdGrp {
      get { return listOrdGrp_; }
    }

    /// <summary>Field number for the "NestedListGrp" field.</summary>
    public const int NestedListGrpFieldNumber = 1773;
    private static readonly pb::FieldCodec<global::Api.NewOrderList> _repeated_nestedListGrp_codec
        = pb::FieldCodec.ForMessage(14186, global::Api.NewOrderList.Parser);
    private readonly pbc::RepeatedField<global::Api.NewOrderList> nestedListGrp_ = new pbc::RepeatedField<global::Api.NewOrderList>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Api.NewOrderList> NestedListGrp {
      get { return nestedListGrp_; }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 55;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TransactTime" field.</summary>
    public const int TransactTimeFieldNumber = 60;
    private long transactTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactTime {
      get { return transactTime_; }
      set {
        transactTime_ = value;
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 1;
    private ulong account_;
    /// <summary>
    /// Unique client ID across echange.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewOrderList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewOrderList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (ListId != other.ListId) return false;
      if (BidType != other.BidType) return false;
      if (TotNoOrders != other.TotNoOrders) return false;
      if (ContingencyType != other.ContingencyType) return false;
      if(!listOrdGrp_.Equals(other.listOrdGrp_)) return false;
      if(!nestedListGrp_.Equals(other.nestedListGrp_)) return false;
      if (Symbol != other.Symbol) return false;
      if (TransactTime != other.TransactTime) return false;
      if (Account != other.Account) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType.Length != 0) hash ^= MsgType.GetHashCode();
      if (ListId.Length != 0) hash ^= ListId.GetHashCode();
      if (BidType.Length != 0) hash ^= BidType.GetHashCode();
      if (TotNoOrders != 0) hash ^= TotNoOrders.GetHashCode();
      if (ContingencyType.Length != 0) hash ^= ContingencyType.GetHashCode();
      hash ^= listOrdGrp_.GetHashCode();
      hash ^= nestedListGrp_.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (TransactTime != 0L) hash ^= TransactTime.GetHashCode();
      if (Account != 0UL) hash ^= Account.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Account);
      }
      if (MsgType.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(MsgType);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteString(Symbol);
      }
      if (TransactTime != 0L) {
        output.WriteRawTag(224, 3);
        output.WriteInt64(TransactTime);
      }
      if (ListId.Length != 0) {
        output.WriteRawTag(146, 4);
        output.WriteString(ListId);
      }
      if (TotNoOrders != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(TotNoOrders);
      }
      listOrdGrp_.WriteTo(output, _repeated_listOrdGrp_codec);
      if (BidType.Length != 0) {
        output.WriteRawTag(210, 24);
        output.WriteString(BidType);
      }
      if (ContingencyType.Length != 0) {
        output.WriteRawTag(202, 86);
        output.WriteString(ContingencyType);
      }
      nestedListGrp_.WriteTo(output, _repeated_nestedListGrp_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MsgType);
      }
      if (ListId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ListId);
      }
      if (BidType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BidType);
      }
      if (TotNoOrders != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TotNoOrders);
      }
      if (ContingencyType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ContingencyType);
      }
      size += listOrdGrp_.CalculateSize(_repeated_listOrdGrp_codec);
      size += nestedListGrp_.CalculateSize(_repeated_nestedListGrp_codec);
      if (Symbol.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (TransactTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TransactTime);
      }
      if (Account != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Account);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewOrderList other) {
      if (other == null) {
        return;
      }
      if (other.MsgType.Length != 0) {
        MsgType = other.MsgType;
      }
      if (other.ListId.Length != 0) {
        ListId = other.ListId;
      }
      if (other.BidType.Length != 0) {
        BidType = other.BidType;
      }
      if (other.TotNoOrders != 0) {
        TotNoOrders = other.TotNoOrders;
      }
      if (other.ContingencyType.Length != 0) {
        ContingencyType = other.ContingencyType;
      }
      listOrdGrp_.Add(other.listOrdGrp_);
      nestedListGrp_.Add(other.nestedListGrp_);
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.TransactTime != 0L) {
        TransactTime = other.TransactTime;
      }
      if (other.Account != 0UL) {
        Account = other.Account;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Account = input.ReadUInt64();
            break;
          }
          case 282: {
            MsgType = input.ReadString();
            break;
          }
          case 442: {
            Symbol = input.ReadString();
            break;
          }
          case 480: {
            TransactTime = input.ReadInt64();
            break;
          }
          case 530: {
            ListId = input.ReadString();
            break;
          }
          case 544: {
            TotNoOrders = input.ReadInt32();
            break;
          }
          case 586: {
            listOrdGrp_.AddEntriesFrom(input, _repeated_listOrdGrp_codec);
            break;
          }
          case 3154: {
            BidType = input.ReadString();
            break;
          }
          case 11082: {
            ContingencyType = input.ReadString();
            break;
          }
          case 14186: {
            nestedListGrp_.AddEntriesFrom(input, _repeated_nestedListGrp_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OrderListAction : pb::IMessage<OrderListAction> {
    private static readonly pb::MessageParser<OrderListAction> _parser = new pb::MessageParser<OrderListAction>(() => new OrderListAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderListAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.OrderReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderListAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderListAction(OrderListAction other) : this() {
      contingencyType_ = other.contingencyType_;
      orderId_ = other.orderId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderListAction Clone() {
      return new OrderListAction(this);
    }

    /// <summary>Field number for the "ContingencyType" field.</summary>
    public const int ContingencyTypeFieldNumber = 1385;
    private string contingencyType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContingencyType {
      get { return contingencyType_; }
      set {
        contingencyType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OrderId" field.</summary>
    public const int OrderIdFieldNumber = 37;
    private static readonly pb::FieldCodec<string> _repeated_orderId_codec
        = pb::FieldCodec.ForString(298);
    private readonly pbc::RepeatedField<string> orderId_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> OrderId {
      get { return orderId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderListAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderListAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContingencyType != other.ContingencyType) return false;
      if(!orderId_.Equals(other.orderId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ContingencyType.Length != 0) hash ^= ContingencyType.GetHashCode();
      hash ^= orderId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      orderId_.WriteTo(output, _repeated_orderId_codec);
      if (ContingencyType.Length != 0) {
        output.WriteRawTag(202, 86);
        output.WriteString(ContingencyType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ContingencyType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ContingencyType);
      }
      size += orderId_.CalculateSize(_repeated_orderId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderListAction other) {
      if (other == null) {
        return;
      }
      if (other.ContingencyType.Length != 0) {
        ContingencyType = other.ContingencyType;
      }
      orderId_.Add(other.orderId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 298: {
            orderId_.AddEntriesFrom(input, _repeated_orderId_codec);
            break;
          }
          case 11082: {
            ContingencyType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListStatus : pb::IMessage<ListStatus> {
    private static readonly pb::MessageParser<ListStatus> _parser = new pb::MessageParser<ListStatus>(() => new ListStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.OrderReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListStatus(ListStatus other) : this() {
      msgType_ = other.msgType_;
      account_ = other.account_;
      listId_ = other.listId_;
      symbol_ = other.symbol_;
      listStatusType_ = other.listStatusType_;
      listOrderStatus_ = other.listOrderStatus_;
      contingencyType_ = other.contingencyType_;
      listRejectReason_ = other.listRejectReason_;
      listRejectOrder_ = other.listRejectOrder_ != null ? other.listRejectOrder_.Clone() : null;
      transactTime_ = other.transactTime_;
      listStatusText_ = other.listStatusText_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListStatus Clone() {
      return new ListStatus(this);
    }

    /// <summary>Field number for the "MsgType" field.</summary>
    public const int MsgTypeFieldNumber = 35;
    private string msgType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgType {
      get { return msgType_; }
      set {
        msgType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 1;
    private ulong account_;
    /// <summary>
    /// Finance account. Unique client ID across exchange.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "ListId" field.</summary>
    public const int ListIdFieldNumber = 66;
    private string listId_ = "";
    /// <summary>
    /// List ID unique for Account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ListId {
      get { return listId_; }
      set {
        listId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 55;
    private string symbol_ = "";
    /// <summary>
    /// Trade instrument name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ListStatusType" field.</summary>
    public const int ListStatusTypeFieldNumber = 429;
    private string listStatusType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ListStatusType {
      get { return listStatusType_; }
      set {
        listStatusType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ListOrderStatus" field.</summary>
    public const int ListOrderStatusFieldNumber = 431;
    private string listOrderStatus_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ListOrderStatus {
      get { return listOrderStatus_; }
      set {
        listOrderStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ContingencyType" field.</summary>
    public const int ContingencyTypeFieldNumber = 1385;
    private string contingencyType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContingencyType {
      get { return contingencyType_; }
      set {
        contingencyType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ListRejectReason" field.</summary>
    public const int ListRejectReasonFieldNumber = 1386;
    private string listRejectReason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ListRejectReason {
      get { return listRejectReason_; }
      set {
        listRejectReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ListRejectOrder" field.</summary>
    public const int ListRejectOrderFieldNumber = 1387;
    private global::Api.ExecutionReport listRejectOrder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.ExecutionReport ListRejectOrder {
      get { return listRejectOrder_; }
      set {
        listRejectOrder_ = value;
      }
    }

    /// <summary>Field number for the "TransactTime" field.</summary>
    public const int TransactTimeFieldNumber = 60;
    private long transactTime_;
    /// <summary>
    /// Moment(timestamp) of transaction execution.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactTime {
      get { return transactTime_; }
      set {
        transactTime_ = value;
      }
    }

    /// <summary>Field number for the "ListStatusText" field.</summary>
    public const int ListStatusTextFieldNumber = 444;
    private string listStatusText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ListStatusText {
      get { return listStatusText_; }
      set {
        listStatusText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (Account != other.Account) return false;
      if (ListId != other.ListId) return false;
      if (Symbol != other.Symbol) return false;
      if (ListStatusType != other.ListStatusType) return false;
      if (ListOrderStatus != other.ListOrderStatus) return false;
      if (ContingencyType != other.ContingencyType) return false;
      if (ListRejectReason != other.ListRejectReason) return false;
      if (!object.Equals(ListRejectOrder, other.ListRejectOrder)) return false;
      if (TransactTime != other.TransactTime) return false;
      if (ListStatusText != other.ListStatusText) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType.Length != 0) hash ^= MsgType.GetHashCode();
      if (Account != 0UL) hash ^= Account.GetHashCode();
      if (ListId.Length != 0) hash ^= ListId.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (ListStatusType.Length != 0) hash ^= ListStatusType.GetHashCode();
      if (ListOrderStatus.Length != 0) hash ^= ListOrderStatus.GetHashCode();
      if (ContingencyType.Length != 0) hash ^= ContingencyType.GetHashCode();
      if (ListRejectReason.Length != 0) hash ^= ListRejectReason.GetHashCode();
      if (listRejectOrder_ != null) hash ^= ListRejectOrder.GetHashCode();
      if (TransactTime != 0L) hash ^= TransactTime.GetHashCode();
      if (ListStatusText.Length != 0) hash ^= ListStatusText.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Account);
      }
      if (MsgType.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(MsgType);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteString(Symbol);
      }
      if (TransactTime != 0L) {
        output.WriteRawTag(224, 3);
        output.WriteInt64(TransactTime);
      }
      if (ListId.Length != 0) {
        output.WriteRawTag(146, 4);
        output.WriteString(ListId);
      }
      if (ListStatusType.Length != 0) {
        output.WriteRawTag(234, 26);
        output.WriteString(ListStatusType);
      }
      if (ListOrderStatus.Length != 0) {
        output.WriteRawTag(250, 26);
        output.WriteString(ListOrderStatus);
      }
      if (ListStatusText.Length != 0) {
        output.WriteRawTag(226, 27);
        output.WriteString(ListStatusText);
      }
      if (ContingencyType.Length != 0) {
        output.WriteRawTag(202, 86);
        output.WriteString(ContingencyType);
      }
      if (ListRejectReason.Length != 0) {
        output.WriteRawTag(210, 86);
        output.WriteString(ListRejectReason);
      }
      if (listRejectOrder_ != null) {
        output.WriteRawTag(218, 86);
        output.WriteMessage(ListRejectOrder);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MsgType);
      }
      if (Account != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Account);
      }
      if (ListId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ListId);
      }
      if (Symbol.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (ListStatusType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ListStatusType);
      }
      if (ListOrderStatus.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ListOrderStatus);
      }
      if (ContingencyType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ContingencyType);
      }
      if (ListRejectReason.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ListRejectReason);
      }
      if (listRejectOrder_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ListRejectOrder);
      }
      if (TransactTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TransactTime);
      }
      if (ListStatusText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ListStatusText);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListStatus other) {
      if (other == null) {
        return;
      }
      if (other.MsgType.Length != 0) {
        MsgType = other.MsgType;
      }
      if (other.Account != 0UL) {
        Account = other.Account;
      }
      if (other.ListId.Length != 0) {
        ListId = other.ListId;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.ListStatusType.Length != 0) {
        ListStatusType = other.ListStatusType;
      }
      if (other.ListOrderStatus.Length != 0) {
        ListOrderStatus = other.ListOrderStatus;
      }
      if (other.ContingencyType.Length != 0) {
        ContingencyType = other.ContingencyType;
      }
      if (other.ListRejectReason.Length != 0) {
        ListRejectReason = other.ListRejectReason;
      }
      if (other.listRejectOrder_ != null) {
        if (listRejectOrder_ == null) {
          ListRejectOrder = new global::Api.ExecutionReport();
        }
        ListRejectOrder.MergeFrom(other.ListRejectOrder);
      }
      if (other.TransactTime != 0L) {
        TransactTime = other.TransactTime;
      }
      if (other.ListStatusText.Length != 0) {
        ListStatusText = other.ListStatusText;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Account = input.ReadUInt64();
            break;
          }
          case 282: {
            MsgType = input.ReadString();
            break;
          }
          case 442: {
            Symbol = input.ReadString();
            break;
          }
          case 480: {
            TransactTime = input.ReadInt64();
            break;
          }
          case 530: {
            ListId = input.ReadString();
            break;
          }
          case 3434: {
            ListStatusType = input.ReadString();
            break;
          }
          case 3450: {
            ListOrderStatus = input.ReadString();
            break;
          }
          case 3554: {
            ListStatusText = input.ReadString();
            break;
          }
          case 11082: {
            ContingencyType = input.ReadString();
            break;
          }
          case 11090: {
            ListRejectReason = input.ReadString();
            break;
          }
          case 11098: {
            if (listRejectOrder_ == null) {
              ListRejectOrder = new global::Api.ExecutionReport();
            }
            input.ReadMessage(ListRejectOrder);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: market.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Api {

  /// <summary>Holder for reflection information generated from market.proto</summary>
  public static partial class MarketReflection {

    #region Descriptor
    /// <summary>File descriptor for market.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MarketReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxtYXJrZXQucHJvdG8SA2FwaSK1BQoHTURFbnRyeRIWCgZTeW1ib2wYNyAB",
            "KAlSBnN5bWJvbBInCg5NRFVwZGF0ZUFjdGlvbhiXAiABKAlSDm1kVXBkYXRl",
            "QWN0aW9uEiEKC01ERW50cnlUeXBlGI0CIAEoCVILbWRFbnRyeVR5cGUSHQoJ",
            "TURFbnRyeVB4GI4CIAEoCVIJbWRFbnRyeVB4EiEKC01ERW50cnlTaXplGI8C",
            "IAEoCVILbWRFbnRyeVNpemUSJwoOTnVtYmVyT2ZPcmRlcnMY2gIgASgNUg5u",
            "dW1iZXJPZk9yZGVycxIiCgxUcmFuc2FjdFRpbWUYPCABKANSDHRyYW5zYWN0",
            "VGltZRIZCgdUcmFkZUlkGOsHIAEoCVIHdHJhZGVJZBIlCg1BZ2dyZXNzb3JT",
            "aWRlGN0LIAEoCVINYWdncmVzc29yU2lkZRIZCgdGaXJzdFB4GIEIIAEoCVIH",
            "Zmlyc3RQeBIWCgZMYXN0UHgYHyABKAlSBmxhc3RQeBIXCgZIaWdoUHgYzAIg",
            "ASgJUgZoaWdoUHgSFQoFTG93UHgYzQIgASgJUgVsb3dQeBIdCglCdXlWb2x1",
            "bWUYygIgASgJUglidXlWb2x1bWUSHwoKU2VsbFZvbHVtZRjLAiABKAlSCnNl",
            "bGxWb2x1bWUSEQoDQmlkGN4LIAEoCVIDYmlkEhEKA0FzaxjfCyABKAlSA2Fz",
            "axIgCgpMb3dSYW5nZVB4GJGWAiABKAlSCmxvd1JhbmdlUHgSIgoLSGlnaFJh",
            "bmdlUHgYkpYCIAEoCVILaGlnaFJhbmdlUHgSIAoKTG93TGltaXRQeBiTlgIg",
            "ASgJUgpsb3dMaW1pdFB4EiIKC0hpZ2hMaW1pdFB4GJSWAiABKAlSC2hpZ2hM",
            "aW1pdFB4EiAKCkNsZWFyaW5nUHgYlZYCIAEoCVIKY2xlYXJpbmdQeCLkAwoR",
            "TWFya2V0RGF0YVJlZnJlc2gSGAoHTXNnVHlwZRgjIAEoCVIHbXNnVHlwZRIf",
            "CgpNRFN0cmVhbUlkGNwLIAEoCVIKbWRTdHJlYW1JZBInCg5MYXN0VXBkYXRl",
            "VGltZRiLBiABKANSDmxhc3RVcGRhdGVUaW1lEh8KCk1EQm9va1R5cGUY/Qcg",
            "ASgJUgptZEJvb2tUeXBlEhYKBlN5bWJvbBg3IAEoCVIGc3ltYm9sEiAKCkxv",
            "d1JhbmdlUHgYkZYCIAEoCVIKbG93UmFuZ2VQeBIiCgtIaWdoUmFuZ2VQeBiS",
            "lgIgASgJUgtoaWdoUmFuZ2VQeBIgCgpMb3dMaW1pdFB4GJOWAiABKAlSCmxv",
            "d0xpbWl0UHgSIgoLSGlnaExpbWl0UHgYlJYCIAEoCVILaGlnaExpbWl0UHgS",
            "IAoKQ2xlYXJpbmdQeBiVlgIgASgJUgpjbGVhcmluZ1B4EhkKB0Jlc3RCaWQY",
            "3gsgASgJUgdiZXN0QmlkEhkKB0Jlc3RBc2sY3wsgASgJUgdiZXN0QXNrEicK",
            "B01ERW50cnkYjAIgAygLMgwuYXBpLk1ERW50cnlSB21kRW50cnkSJQoGUmF0",
            "aW9zGOALIAMoCzIMLmFwaS5NREVudHJ5UgZyYXRpb3Mi2wEKEU1hcmtldERh",
            "dGFSZXF1ZXN0Eg8KB01zZ1R5cGUYIyABKAkSEwoKTURTdHJlYW1JZBjcCyAB",
            "KAkSIAoXU3Vic2NyaXB0aW9uUmVxdWVzdFR5cGUYhwIgASgJEhUKDFRocm90",
            "dGxlVHlwZRjMDCABKAkSHQoUVGhyb3R0bGVUaW1lSW50ZXJ2YWwYzgwgASgD",
            "EhkKEFRocm90dGxlVGltZVVuaXQYzwwgASgJEhcKDkFnZ3JlZ2F0ZWRCb29r",
            "GIoCIAEoAxIUCgtNYXJrZXREZXB0aBiIAiABKAMiVAoXTWFya2V0RGF0YVJl",
            "cXVlc3RSZWplY3QSDwoHTXNnVHlwZRgjIAEoCRITCgpNRFN0cmVhbUlkGNwL",
            "IAEoCRITCgpSZWplY3RUZXh0GLAKIAEoCSIvCgRCYXJzEicKB01ERW50cnkY",
            "jAIgAygLMgwuYXBpLk1ERW50cnlSB21kRW50cnliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.MDEntry), global::Api.MDEntry.Parser, new[]{ "Symbol", "MDUpdateAction", "MDEntryType", "MDEntryPx", "MDEntrySize", "NumberOfOrders", "TransactTime", "TradeId", "AggressorSide", "FirstPx", "LastPx", "HighPx", "LowPx", "BuyVolume", "SellVolume", "Bid", "Ask", "LowRangePx", "HighRangePx", "LowLimitPx", "HighLimitPx", "ClearingPx" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.MarketDataRefresh), global::Api.MarketDataRefresh.Parser, new[]{ "MsgType", "MDStreamId", "LastUpdateTime", "MDBookType", "Symbol", "LowRangePx", "HighRangePx", "LowLimitPx", "HighLimitPx", "ClearingPx", "BestBid", "BestAsk", "MDEntry", "Ratios" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.MarketDataRequest), global::Api.MarketDataRequest.Parser, new[]{ "MsgType", "MDStreamId", "SubscriptionRequestType", "ThrottleType", "ThrottleTimeInterval", "ThrottleTimeUnit", "AggregatedBook", "MarketDepth" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.MarketDataRequestReject), global::Api.MarketDataRequestReject.Parser, new[]{ "MsgType", "MDStreamId", "RejectText" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Bars), global::Api.Bars.Parser, new[]{ "MDEntry" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MDEntry : pb::IMessage<MDEntry> {
    private static readonly pb::MessageParser<MDEntry> _parser = new pb::MessageParser<MDEntry>(() => new MDEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MDEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.MarketReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MDEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MDEntry(MDEntry other) : this() {
      symbol_ = other.symbol_;
      mDUpdateAction_ = other.mDUpdateAction_;
      mDEntryType_ = other.mDEntryType_;
      mDEntryPx_ = other.mDEntryPx_;
      mDEntrySize_ = other.mDEntrySize_;
      numberOfOrders_ = other.numberOfOrders_;
      transactTime_ = other.transactTime_;
      tradeId_ = other.tradeId_;
      aggressorSide_ = other.aggressorSide_;
      firstPx_ = other.firstPx_;
      lastPx_ = other.lastPx_;
      highPx_ = other.highPx_;
      lowPx_ = other.lowPx_;
      buyVolume_ = other.buyVolume_;
      sellVolume_ = other.sellVolume_;
      bid_ = other.bid_;
      ask_ = other.ask_;
      lowRangePx_ = other.lowRangePx_;
      highRangePx_ = other.highRangePx_;
      lowLimitPx_ = other.lowLimitPx_;
      highLimitPx_ = other.highLimitPx_;
      clearingPx_ = other.clearingPx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MDEntry Clone() {
      return new MDEntry(this);
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 55;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MDUpdateAction" field.</summary>
    public const int MDUpdateActionFieldNumber = 279;
    private string mDUpdateAction_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MDUpdateAction {
      get { return mDUpdateAction_; }
      set {
        mDUpdateAction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MDEntryType" field.</summary>
    public const int MDEntryTypeFieldNumber = 269;
    private string mDEntryType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MDEntryType {
      get { return mDEntryType_; }
      set {
        mDEntryType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MDEntryPx" field.</summary>
    public const int MDEntryPxFieldNumber = 270;
    private string mDEntryPx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MDEntryPx {
      get { return mDEntryPx_; }
      set {
        mDEntryPx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MDEntrySize" field.</summary>
    public const int MDEntrySizeFieldNumber = 271;
    private string mDEntrySize_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MDEntrySize {
      get { return mDEntrySize_; }
      set {
        mDEntrySize_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NumberOfOrders" field.</summary>
    public const int NumberOfOrdersFieldNumber = 346;
    private uint numberOfOrders_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumberOfOrders {
      get { return numberOfOrders_; }
      set {
        numberOfOrders_ = value;
      }
    }

    /// <summary>Field number for the "TransactTime" field.</summary>
    public const int TransactTimeFieldNumber = 60;
    private long transactTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactTime {
      get { return transactTime_; }
      set {
        transactTime_ = value;
      }
    }

    /// <summary>Field number for the "TradeId" field.</summary>
    public const int TradeIdFieldNumber = 1003;
    private string tradeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeId {
      get { return tradeId_; }
      set {
        tradeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AggressorSide" field.</summary>
    public const int AggressorSideFieldNumber = 1501;
    private string aggressorSide_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AggressorSide {
      get { return aggressorSide_; }
      set {
        aggressorSide_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FirstPx" field.</summary>
    public const int FirstPxFieldNumber = 1025;
    private string firstPx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstPx {
      get { return firstPx_; }
      set {
        firstPx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LastPx" field.</summary>
    public const int LastPxFieldNumber = 31;
    private string lastPx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastPx {
      get { return lastPx_; }
      set {
        lastPx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HighPx" field.</summary>
    public const int HighPxFieldNumber = 332;
    private string highPx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HighPx {
      get { return highPx_; }
      set {
        highPx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LowPx" field.</summary>
    public const int LowPxFieldNumber = 333;
    private string lowPx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LowPx {
      get { return lowPx_; }
      set {
        lowPx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BuyVolume" field.</summary>
    public const int BuyVolumeFieldNumber = 330;
    private string buyVolume_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuyVolume {
      get { return buyVolume_; }
      set {
        buyVolume_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SellVolume" field.</summary>
    public const int SellVolumeFieldNumber = 331;
    private string sellVolume_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SellVolume {
      get { return sellVolume_; }
      set {
        sellVolume_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Bid" field.</summary>
    public const int BidFieldNumber = 1502;
    private string bid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Bid {
      get { return bid_; }
      set {
        bid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ask" field.</summary>
    public const int AskFieldNumber = 1503;
    private string ask_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ask {
      get { return ask_; }
      set {
        ask_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LowRangePx" field.</summary>
    public const int LowRangePxFieldNumber = 35601;
    private string lowRangePx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LowRangePx {
      get { return lowRangePx_; }
      set {
        lowRangePx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HighRangePx" field.</summary>
    public const int HighRangePxFieldNumber = 35602;
    private string highRangePx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HighRangePx {
      get { return highRangePx_; }
      set {
        highRangePx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LowLimitPx" field.</summary>
    public const int LowLimitPxFieldNumber = 35603;
    private string lowLimitPx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LowLimitPx {
      get { return lowLimitPx_; }
      set {
        lowLimitPx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HighLimitPx" field.</summary>
    public const int HighLimitPxFieldNumber = 35604;
    private string highLimitPx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HighLimitPx {
      get { return highLimitPx_; }
      set {
        highLimitPx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClearingPx" field.</summary>
    public const int ClearingPxFieldNumber = 35605;
    private string clearingPx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClearingPx {
      get { return clearingPx_; }
      set {
        clearingPx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MDEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MDEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (MDUpdateAction != other.MDUpdateAction) return false;
      if (MDEntryType != other.MDEntryType) return false;
      if (MDEntryPx != other.MDEntryPx) return false;
      if (MDEntrySize != other.MDEntrySize) return false;
      if (NumberOfOrders != other.NumberOfOrders) return false;
      if (TransactTime != other.TransactTime) return false;
      if (TradeId != other.TradeId) return false;
      if (AggressorSide != other.AggressorSide) return false;
      if (FirstPx != other.FirstPx) return false;
      if (LastPx != other.LastPx) return false;
      if (HighPx != other.HighPx) return false;
      if (LowPx != other.LowPx) return false;
      if (BuyVolume != other.BuyVolume) return false;
      if (SellVolume != other.SellVolume) return false;
      if (Bid != other.Bid) return false;
      if (Ask != other.Ask) return false;
      if (LowRangePx != other.LowRangePx) return false;
      if (HighRangePx != other.HighRangePx) return false;
      if (LowLimitPx != other.LowLimitPx) return false;
      if (HighLimitPx != other.HighLimitPx) return false;
      if (ClearingPx != other.ClearingPx) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (MDUpdateAction.Length != 0) hash ^= MDUpdateAction.GetHashCode();
      if (MDEntryType.Length != 0) hash ^= MDEntryType.GetHashCode();
      if (MDEntryPx.Length != 0) hash ^= MDEntryPx.GetHashCode();
      if (MDEntrySize.Length != 0) hash ^= MDEntrySize.GetHashCode();
      if (NumberOfOrders != 0) hash ^= NumberOfOrders.GetHashCode();
      if (TransactTime != 0L) hash ^= TransactTime.GetHashCode();
      if (TradeId.Length != 0) hash ^= TradeId.GetHashCode();
      if (AggressorSide.Length != 0) hash ^= AggressorSide.GetHashCode();
      if (FirstPx.Length != 0) hash ^= FirstPx.GetHashCode();
      if (LastPx.Length != 0) hash ^= LastPx.GetHashCode();
      if (HighPx.Length != 0) hash ^= HighPx.GetHashCode();
      if (LowPx.Length != 0) hash ^= LowPx.GetHashCode();
      if (BuyVolume.Length != 0) hash ^= BuyVolume.GetHashCode();
      if (SellVolume.Length != 0) hash ^= SellVolume.GetHashCode();
      if (Bid.Length != 0) hash ^= Bid.GetHashCode();
      if (Ask.Length != 0) hash ^= Ask.GetHashCode();
      if (LowRangePx.Length != 0) hash ^= LowRangePx.GetHashCode();
      if (HighRangePx.Length != 0) hash ^= HighRangePx.GetHashCode();
      if (LowLimitPx.Length != 0) hash ^= LowLimitPx.GetHashCode();
      if (HighLimitPx.Length != 0) hash ^= HighLimitPx.GetHashCode();
      if (ClearingPx.Length != 0) hash ^= ClearingPx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastPx.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(LastPx);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteString(Symbol);
      }
      if (TransactTime != 0L) {
        output.WriteRawTag(224, 3);
        output.WriteInt64(TransactTime);
      }
      if (MDEntryType.Length != 0) {
        output.WriteRawTag(234, 16);
        output.WriteString(MDEntryType);
      }
      if (MDEntryPx.Length != 0) {
        output.WriteRawTag(242, 16);
        output.WriteString(MDEntryPx);
      }
      if (MDEntrySize.Length != 0) {
        output.WriteRawTag(250, 16);
        output.WriteString(MDEntrySize);
      }
      if (MDUpdateAction.Length != 0) {
        output.WriteRawTag(186, 17);
        output.WriteString(MDUpdateAction);
      }
      if (BuyVolume.Length != 0) {
        output.WriteRawTag(210, 20);
        output.WriteString(BuyVolume);
      }
      if (SellVolume.Length != 0) {
        output.WriteRawTag(218, 20);
        output.WriteString(SellVolume);
      }
      if (HighPx.Length != 0) {
        output.WriteRawTag(226, 20);
        output.WriteString(HighPx);
      }
      if (LowPx.Length != 0) {
        output.WriteRawTag(234, 20);
        output.WriteString(LowPx);
      }
      if (NumberOfOrders != 0) {
        output.WriteRawTag(208, 21);
        output.WriteUInt32(NumberOfOrders);
      }
      if (TradeId.Length != 0) {
        output.WriteRawTag(218, 62);
        output.WriteString(TradeId);
      }
      if (FirstPx.Length != 0) {
        output.WriteRawTag(138, 64);
        output.WriteString(FirstPx);
      }
      if (AggressorSide.Length != 0) {
        output.WriteRawTag(234, 93);
        output.WriteString(AggressorSide);
      }
      if (Bid.Length != 0) {
        output.WriteRawTag(242, 93);
        output.WriteString(Bid);
      }
      if (Ask.Length != 0) {
        output.WriteRawTag(250, 93);
        output.WriteString(Ask);
      }
      if (LowRangePx.Length != 0) {
        output.WriteRawTag(138, 177, 17);
        output.WriteString(LowRangePx);
      }
      if (HighRangePx.Length != 0) {
        output.WriteRawTag(146, 177, 17);
        output.WriteString(HighRangePx);
      }
      if (LowLimitPx.Length != 0) {
        output.WriteRawTag(154, 177, 17);
        output.WriteString(LowLimitPx);
      }
      if (HighLimitPx.Length != 0) {
        output.WriteRawTag(162, 177, 17);
        output.WriteString(HighLimitPx);
      }
      if (ClearingPx.Length != 0) {
        output.WriteRawTag(170, 177, 17);
        output.WriteString(ClearingPx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (MDUpdateAction.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MDUpdateAction);
      }
      if (MDEntryType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MDEntryType);
      }
      if (MDEntryPx.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MDEntryPx);
      }
      if (MDEntrySize.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MDEntrySize);
      }
      if (NumberOfOrders != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NumberOfOrders);
      }
      if (TransactTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TransactTime);
      }
      if (TradeId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TradeId);
      }
      if (AggressorSide.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AggressorSide);
      }
      if (FirstPx.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FirstPx);
      }
      if (LastPx.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LastPx);
      }
      if (HighPx.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HighPx);
      }
      if (LowPx.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LowPx);
      }
      if (BuyVolume.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BuyVolume);
      }
      if (SellVolume.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SellVolume);
      }
      if (Bid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Bid);
      }
      if (Ask.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Ask);
      }
      if (LowRangePx.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(LowRangePx);
      }
      if (HighRangePx.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(HighRangePx);
      }
      if (LowLimitPx.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(LowLimitPx);
      }
      if (HighLimitPx.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(HighLimitPx);
      }
      if (ClearingPx.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(ClearingPx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MDEntry other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.MDUpdateAction.Length != 0) {
        MDUpdateAction = other.MDUpdateAction;
      }
      if (other.MDEntryType.Length != 0) {
        MDEntryType = other.MDEntryType;
      }
      if (other.MDEntryPx.Length != 0) {
        MDEntryPx = other.MDEntryPx;
      }
      if (other.MDEntrySize.Length != 0) {
        MDEntrySize = other.MDEntrySize;
      }
      if (other.NumberOfOrders != 0) {
        NumberOfOrders = other.NumberOfOrders;
      }
      if (other.TransactTime != 0L) {
        TransactTime = other.TransactTime;
      }
      if (other.TradeId.Length != 0) {
        TradeId = other.TradeId;
      }
      if (other.AggressorSide.Length != 0) {
        AggressorSide = other.AggressorSide;
      }
      if (other.FirstPx.Length != 0) {
        FirstPx = other.FirstPx;
      }
      if (other.LastPx.Length != 0) {
        LastPx = other.LastPx;
      }
      if (other.HighPx.Length != 0) {
        HighPx = other.HighPx;
      }
      if (other.LowPx.Length != 0) {
        LowPx = other.LowPx;
      }
      if (other.BuyVolume.Length != 0) {
        BuyVolume = other.BuyVolume;
      }
      if (other.SellVolume.Length != 0) {
        SellVolume = other.SellVolume;
      }
      if (other.Bid.Length != 0) {
        Bid = other.Bid;
      }
      if (other.Ask.Length != 0) {
        Ask = other.Ask;
      }
      if (other.LowRangePx.Length != 0) {
        LowRangePx = other.LowRangePx;
      }
      if (other.HighRangePx.Length != 0) {
        HighRangePx = other.HighRangePx;
      }
      if (other.LowLimitPx.Length != 0) {
        LowLimitPx = other.LowLimitPx;
      }
      if (other.HighLimitPx.Length != 0) {
        HighLimitPx = other.HighLimitPx;
      }
      if (other.ClearingPx.Length != 0) {
        ClearingPx = other.ClearingPx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 250: {
            LastPx = input.ReadString();
            break;
          }
          case 442: {
            Symbol = input.ReadString();
            break;
          }
          case 480: {
            TransactTime = input.ReadInt64();
            break;
          }
          case 2154: {
            MDEntryType = input.ReadString();
            break;
          }
          case 2162: {
            MDEntryPx = input.ReadString();
            break;
          }
          case 2170: {
            MDEntrySize = input.ReadString();
            break;
          }
          case 2234: {
            MDUpdateAction = input.ReadString();
            break;
          }
          case 2642: {
            BuyVolume = input.ReadString();
            break;
          }
          case 2650: {
            SellVolume = input.ReadString();
            break;
          }
          case 2658: {
            HighPx = input.ReadString();
            break;
          }
          case 2666: {
            LowPx = input.ReadString();
            break;
          }
          case 2768: {
            NumberOfOrders = input.ReadUInt32();
            break;
          }
          case 8026: {
            TradeId = input.ReadString();
            break;
          }
          case 8202: {
            FirstPx = input.ReadString();
            break;
          }
          case 12010: {
            AggressorSide = input.ReadString();
            break;
          }
          case 12018: {
            Bid = input.ReadString();
            break;
          }
          case 12026: {
            Ask = input.ReadString();
            break;
          }
          case 284810: {
            LowRangePx = input.ReadString();
            break;
          }
          case 284818: {
            HighRangePx = input.ReadString();
            break;
          }
          case 284826: {
            LowLimitPx = input.ReadString();
            break;
          }
          case 284834: {
            HighLimitPx = input.ReadString();
            break;
          }
          case 284842: {
            ClearingPx = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MarketDataRefresh : pb::IMessage<MarketDataRefresh> {
    private static readonly pb::MessageParser<MarketDataRefresh> _parser = new pb::MessageParser<MarketDataRefresh>(() => new MarketDataRefresh());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataRefresh> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.MarketReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataRefresh() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataRefresh(MarketDataRefresh other) : this() {
      msgType_ = other.msgType_;
      mDStreamId_ = other.mDStreamId_;
      lastUpdateTime_ = other.lastUpdateTime_;
      mDBookType_ = other.mDBookType_;
      symbol_ = other.symbol_;
      lowRangePx_ = other.lowRangePx_;
      highRangePx_ = other.highRangePx_;
      lowLimitPx_ = other.lowLimitPx_;
      highLimitPx_ = other.highLimitPx_;
      clearingPx_ = other.clearingPx_;
      bestBid_ = other.bestBid_;
      bestAsk_ = other.bestAsk_;
      mDEntry_ = other.mDEntry_.Clone();
      ratios_ = other.ratios_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataRefresh Clone() {
      return new MarketDataRefresh(this);
    }

    /// <summary>Field number for the "MsgType" field.</summary>
    public const int MsgTypeFieldNumber = 35;
    private string msgType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgType {
      get { return msgType_; }
      set {
        msgType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MDStreamId" field.</summary>
    public const int MDStreamIdFieldNumber = 1500;
    private string mDStreamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MDStreamId {
      get { return mDStreamId_; }
      set {
        mDStreamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LastUpdateTime" field.</summary>
    public const int LastUpdateTimeFieldNumber = 779;
    private long lastUpdateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastUpdateTime {
      get { return lastUpdateTime_; }
      set {
        lastUpdateTime_ = value;
      }
    }

    /// <summary>Field number for the "MDBookType" field.</summary>
    public const int MDBookTypeFieldNumber = 1021;
    private string mDBookType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MDBookType {
      get { return mDBookType_; }
      set {
        mDBookType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 55;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LowRangePx" field.</summary>
    public const int LowRangePxFieldNumber = 35601;
    private string lowRangePx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LowRangePx {
      get { return lowRangePx_; }
      set {
        lowRangePx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HighRangePx" field.</summary>
    public const int HighRangePxFieldNumber = 35602;
    private string highRangePx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HighRangePx {
      get { return highRangePx_; }
      set {
        highRangePx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LowLimitPx" field.</summary>
    public const int LowLimitPxFieldNumber = 35603;
    private string lowLimitPx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LowLimitPx {
      get { return lowLimitPx_; }
      set {
        lowLimitPx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HighLimitPx" field.</summary>
    public const int HighLimitPxFieldNumber = 35604;
    private string highLimitPx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HighLimitPx {
      get { return highLimitPx_; }
      set {
        highLimitPx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClearingPx" field.</summary>
    public const int ClearingPxFieldNumber = 35605;
    private string clearingPx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClearingPx {
      get { return clearingPx_; }
      set {
        clearingPx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BestBid" field.</summary>
    public const int BestBidFieldNumber = 1502;
    private string bestBid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BestBid {
      get { return bestBid_; }
      set {
        bestBid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BestAsk" field.</summary>
    public const int BestAskFieldNumber = 1503;
    private string bestAsk_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BestAsk {
      get { return bestAsk_; }
      set {
        bestAsk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MDEntry" field.</summary>
    public const int MDEntryFieldNumber = 268;
    private static readonly pb::FieldCodec<global::Api.MDEntry> _repeated_mDEntry_codec
        = pb::FieldCodec.ForMessage(2146, global::Api.MDEntry.Parser);
    private readonly pbc::RepeatedField<global::Api.MDEntry> mDEntry_ = new pbc::RepeatedField<global::Api.MDEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Api.MDEntry> MDEntry {
      get { return mDEntry_; }
    }

    /// <summary>Field number for the "Ratios" field.</summary>
    public const int RatiosFieldNumber = 1504;
    private static readonly pb::FieldCodec<global::Api.MDEntry> _repeated_ratios_codec
        = pb::FieldCodec.ForMessage(12034, global::Api.MDEntry.Parser);
    private readonly pbc::RepeatedField<global::Api.MDEntry> ratios_ = new pbc::RepeatedField<global::Api.MDEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Api.MDEntry> Ratios {
      get { return ratios_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataRefresh);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataRefresh other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (MDStreamId != other.MDStreamId) return false;
      if (LastUpdateTime != other.LastUpdateTime) return false;
      if (MDBookType != other.MDBookType) return false;
      if (Symbol != other.Symbol) return false;
      if (LowRangePx != other.LowRangePx) return false;
      if (HighRangePx != other.HighRangePx) return false;
      if (LowLimitPx != other.LowLimitPx) return false;
      if (HighLimitPx != other.HighLimitPx) return false;
      if (ClearingPx != other.ClearingPx) return false;
      if (BestBid != other.BestBid) return false;
      if (BestAsk != other.BestAsk) return false;
      if(!mDEntry_.Equals(other.mDEntry_)) return false;
      if(!ratios_.Equals(other.ratios_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType.Length != 0) hash ^= MsgType.GetHashCode();
      if (MDStreamId.Length != 0) hash ^= MDStreamId.GetHashCode();
      if (LastUpdateTime != 0L) hash ^= LastUpdateTime.GetHashCode();
      if (MDBookType.Length != 0) hash ^= MDBookType.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (LowRangePx.Length != 0) hash ^= LowRangePx.GetHashCode();
      if (HighRangePx.Length != 0) hash ^= HighRangePx.GetHashCode();
      if (LowLimitPx.Length != 0) hash ^= LowLimitPx.GetHashCode();
      if (HighLimitPx.Length != 0) hash ^= HighLimitPx.GetHashCode();
      if (ClearingPx.Length != 0) hash ^= ClearingPx.GetHashCode();
      if (BestBid.Length != 0) hash ^= BestBid.GetHashCode();
      if (BestAsk.Length != 0) hash ^= BestAsk.GetHashCode();
      hash ^= mDEntry_.GetHashCode();
      hash ^= ratios_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MsgType.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(MsgType);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteString(Symbol);
      }
      mDEntry_.WriteTo(output, _repeated_mDEntry_codec);
      if (LastUpdateTime != 0L) {
        output.WriteRawTag(216, 48);
        output.WriteInt64(LastUpdateTime);
      }
      if (MDBookType.Length != 0) {
        output.WriteRawTag(234, 63);
        output.WriteString(MDBookType);
      }
      if (MDStreamId.Length != 0) {
        output.WriteRawTag(226, 93);
        output.WriteString(MDStreamId);
      }
      if (BestBid.Length != 0) {
        output.WriteRawTag(242, 93);
        output.WriteString(BestBid);
      }
      if (BestAsk.Length != 0) {
        output.WriteRawTag(250, 93);
        output.WriteString(BestAsk);
      }
      ratios_.WriteTo(output, _repeated_ratios_codec);
      if (LowRangePx.Length != 0) {
        output.WriteRawTag(138, 177, 17);
        output.WriteString(LowRangePx);
      }
      if (HighRangePx.Length != 0) {
        output.WriteRawTag(146, 177, 17);
        output.WriteString(HighRangePx);
      }
      if (LowLimitPx.Length != 0) {
        output.WriteRawTag(154, 177, 17);
        output.WriteString(LowLimitPx);
      }
      if (HighLimitPx.Length != 0) {
        output.WriteRawTag(162, 177, 17);
        output.WriteString(HighLimitPx);
      }
      if (ClearingPx.Length != 0) {
        output.WriteRawTag(170, 177, 17);
        output.WriteString(ClearingPx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MsgType);
      }
      if (MDStreamId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MDStreamId);
      }
      if (LastUpdateTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastUpdateTime);
      }
      if (MDBookType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MDBookType);
      }
      if (Symbol.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (LowRangePx.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(LowRangePx);
      }
      if (HighRangePx.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(HighRangePx);
      }
      if (LowLimitPx.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(LowLimitPx);
      }
      if (HighLimitPx.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(HighLimitPx);
      }
      if (ClearingPx.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(ClearingPx);
      }
      if (BestBid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BestBid);
      }
      if (BestAsk.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BestAsk);
      }
      size += mDEntry_.CalculateSize(_repeated_mDEntry_codec);
      size += ratios_.CalculateSize(_repeated_ratios_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataRefresh other) {
      if (other == null) {
        return;
      }
      if (other.MsgType.Length != 0) {
        MsgType = other.MsgType;
      }
      if (other.MDStreamId.Length != 0) {
        MDStreamId = other.MDStreamId;
      }
      if (other.LastUpdateTime != 0L) {
        LastUpdateTime = other.LastUpdateTime;
      }
      if (other.MDBookType.Length != 0) {
        MDBookType = other.MDBookType;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.LowRangePx.Length != 0) {
        LowRangePx = other.LowRangePx;
      }
      if (other.HighRangePx.Length != 0) {
        HighRangePx = other.HighRangePx;
      }
      if (other.LowLimitPx.Length != 0) {
        LowLimitPx = other.LowLimitPx;
      }
      if (other.HighLimitPx.Length != 0) {
        HighLimitPx = other.HighLimitPx;
      }
      if (other.ClearingPx.Length != 0) {
        ClearingPx = other.ClearingPx;
      }
      if (other.BestBid.Length != 0) {
        BestBid = other.BestBid;
      }
      if (other.BestAsk.Length != 0) {
        BestAsk = other.BestAsk;
      }
      mDEntry_.Add(other.mDEntry_);
      ratios_.Add(other.ratios_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 282: {
            MsgType = input.ReadString();
            break;
          }
          case 442: {
            Symbol = input.ReadString();
            break;
          }
          case 2146: {
            mDEntry_.AddEntriesFrom(input, _repeated_mDEntry_codec);
            break;
          }
          case 6232: {
            LastUpdateTime = input.ReadInt64();
            break;
          }
          case 8170: {
            MDBookType = input.ReadString();
            break;
          }
          case 12002: {
            MDStreamId = input.ReadString();
            break;
          }
          case 12018: {
            BestBid = input.ReadString();
            break;
          }
          case 12026: {
            BestAsk = input.ReadString();
            break;
          }
          case 12034: {
            ratios_.AddEntriesFrom(input, _repeated_ratios_codec);
            break;
          }
          case 284810: {
            LowRangePx = input.ReadString();
            break;
          }
          case 284818: {
            HighRangePx = input.ReadString();
            break;
          }
          case 284826: {
            LowLimitPx = input.ReadString();
            break;
          }
          case 284834: {
            HighLimitPx = input.ReadString();
            break;
          }
          case 284842: {
            ClearingPx = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MarketDataRequest : pb::IMessage<MarketDataRequest> {
    private static readonly pb::MessageParser<MarketDataRequest> _parser = new pb::MessageParser<MarketDataRequest>(() => new MarketDataRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.MarketReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataRequest(MarketDataRequest other) : this() {
      msgType_ = other.msgType_;
      mDStreamId_ = other.mDStreamId_;
      subscriptionRequestType_ = other.subscriptionRequestType_;
      throttleType_ = other.throttleType_;
      throttleTimeInterval_ = other.throttleTimeInterval_;
      throttleTimeUnit_ = other.throttleTimeUnit_;
      aggregatedBook_ = other.aggregatedBook_;
      marketDepth_ = other.marketDepth_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataRequest Clone() {
      return new MarketDataRequest(this);
    }

    /// <summary>Field number for the "MsgType" field.</summary>
    public const int MsgTypeFieldNumber = 35;
    private string msgType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgType {
      get { return msgType_; }
      set {
        msgType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MDStreamId" field.</summary>
    public const int MDStreamIdFieldNumber = 1500;
    private string mDStreamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MDStreamId {
      get { return mDStreamId_; }
      set {
        mDStreamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SubscriptionRequestType" field.</summary>
    public const int SubscriptionRequestTypeFieldNumber = 263;
    private string subscriptionRequestType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubscriptionRequestType {
      get { return subscriptionRequestType_; }
      set {
        subscriptionRequestType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ThrottleType" field.</summary>
    public const int ThrottleTypeFieldNumber = 1612;
    private string throttleType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ThrottleType {
      get { return throttleType_; }
      set {
        throttleType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ThrottleTimeInterval" field.</summary>
    public const int ThrottleTimeIntervalFieldNumber = 1614;
    private long throttleTimeInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ThrottleTimeInterval {
      get { return throttleTimeInterval_; }
      set {
        throttleTimeInterval_ = value;
      }
    }

    /// <summary>Field number for the "ThrottleTimeUnit" field.</summary>
    public const int ThrottleTimeUnitFieldNumber = 1615;
    private string throttleTimeUnit_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ThrottleTimeUnit {
      get { return throttleTimeUnit_; }
      set {
        throttleTimeUnit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AggregatedBook" field.</summary>
    public const int AggregatedBookFieldNumber = 266;
    private long aggregatedBook_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AggregatedBook {
      get { return aggregatedBook_; }
      set {
        aggregatedBook_ = value;
      }
    }

    /// <summary>Field number for the "MarketDepth" field.</summary>
    public const int MarketDepthFieldNumber = 264;
    private long marketDepth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MarketDepth {
      get { return marketDepth_; }
      set {
        marketDepth_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (MDStreamId != other.MDStreamId) return false;
      if (SubscriptionRequestType != other.SubscriptionRequestType) return false;
      if (ThrottleType != other.ThrottleType) return false;
      if (ThrottleTimeInterval != other.ThrottleTimeInterval) return false;
      if (ThrottleTimeUnit != other.ThrottleTimeUnit) return false;
      if (AggregatedBook != other.AggregatedBook) return false;
      if (MarketDepth != other.MarketDepth) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType.Length != 0) hash ^= MsgType.GetHashCode();
      if (MDStreamId.Length != 0) hash ^= MDStreamId.GetHashCode();
      if (SubscriptionRequestType.Length != 0) hash ^= SubscriptionRequestType.GetHashCode();
      if (ThrottleType.Length != 0) hash ^= ThrottleType.GetHashCode();
      if (ThrottleTimeInterval != 0L) hash ^= ThrottleTimeInterval.GetHashCode();
      if (ThrottleTimeUnit.Length != 0) hash ^= ThrottleTimeUnit.GetHashCode();
      if (AggregatedBook != 0L) hash ^= AggregatedBook.GetHashCode();
      if (MarketDepth != 0L) hash ^= MarketDepth.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MsgType.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(MsgType);
      }
      if (SubscriptionRequestType.Length != 0) {
        output.WriteRawTag(186, 16);
        output.WriteString(SubscriptionRequestType);
      }
      if (MarketDepth != 0L) {
        output.WriteRawTag(192, 16);
        output.WriteInt64(MarketDepth);
      }
      if (AggregatedBook != 0L) {
        output.WriteRawTag(208, 16);
        output.WriteInt64(AggregatedBook);
      }
      if (MDStreamId.Length != 0) {
        output.WriteRawTag(226, 93);
        output.WriteString(MDStreamId);
      }
      if (ThrottleType.Length != 0) {
        output.WriteRawTag(226, 100);
        output.WriteString(ThrottleType);
      }
      if (ThrottleTimeInterval != 0L) {
        output.WriteRawTag(240, 100);
        output.WriteInt64(ThrottleTimeInterval);
      }
      if (ThrottleTimeUnit.Length != 0) {
        output.WriteRawTag(250, 100);
        output.WriteString(ThrottleTimeUnit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MsgType);
      }
      if (MDStreamId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MDStreamId);
      }
      if (SubscriptionRequestType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SubscriptionRequestType);
      }
      if (ThrottleType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ThrottleType);
      }
      if (ThrottleTimeInterval != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ThrottleTimeInterval);
      }
      if (ThrottleTimeUnit.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ThrottleTimeUnit);
      }
      if (AggregatedBook != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AggregatedBook);
      }
      if (MarketDepth != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MarketDepth);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataRequest other) {
      if (other == null) {
        return;
      }
      if (other.MsgType.Length != 0) {
        MsgType = other.MsgType;
      }
      if (other.MDStreamId.Length != 0) {
        MDStreamId = other.MDStreamId;
      }
      if (other.SubscriptionRequestType.Length != 0) {
        SubscriptionRequestType = other.SubscriptionRequestType;
      }
      if (other.ThrottleType.Length != 0) {
        ThrottleType = other.ThrottleType;
      }
      if (other.ThrottleTimeInterval != 0L) {
        ThrottleTimeInterval = other.ThrottleTimeInterval;
      }
      if (other.ThrottleTimeUnit.Length != 0) {
        ThrottleTimeUnit = other.ThrottleTimeUnit;
      }
      if (other.AggregatedBook != 0L) {
        AggregatedBook = other.AggregatedBook;
      }
      if (other.MarketDepth != 0L) {
        MarketDepth = other.MarketDepth;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 282: {
            MsgType = input.ReadString();
            break;
          }
          case 2106: {
            SubscriptionRequestType = input.ReadString();
            break;
          }
          case 2112: {
            MarketDepth = input.ReadInt64();
            break;
          }
          case 2128: {
            AggregatedBook = input.ReadInt64();
            break;
          }
          case 12002: {
            MDStreamId = input.ReadString();
            break;
          }
          case 12898: {
            ThrottleType = input.ReadString();
            break;
          }
          case 12912: {
            ThrottleTimeInterval = input.ReadInt64();
            break;
          }
          case 12922: {
            ThrottleTimeUnit = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MarketDataRequestReject : pb::IMessage<MarketDataRequestReject> {
    private static readonly pb::MessageParser<MarketDataRequestReject> _parser = new pb::MessageParser<MarketDataRequestReject>(() => new MarketDataRequestReject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketDataRequestReject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.MarketReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataRequestReject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataRequestReject(MarketDataRequestReject other) : this() {
      msgType_ = other.msgType_;
      mDStreamId_ = other.mDStreamId_;
      rejectText_ = other.rejectText_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketDataRequestReject Clone() {
      return new MarketDataRequestReject(this);
    }

    /// <summary>Field number for the "MsgType" field.</summary>
    public const int MsgTypeFieldNumber = 35;
    private string msgType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgType {
      get { return msgType_; }
      set {
        msgType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MDStreamId" field.</summary>
    public const int MDStreamIdFieldNumber = 1500;
    private string mDStreamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MDStreamId {
      get { return mDStreamId_; }
      set {
        mDStreamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RejectText" field.</summary>
    public const int RejectTextFieldNumber = 1328;
    private string rejectText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RejectText {
      get { return rejectText_; }
      set {
        rejectText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketDataRequestReject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketDataRequestReject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (MDStreamId != other.MDStreamId) return false;
      if (RejectText != other.RejectText) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType.Length != 0) hash ^= MsgType.GetHashCode();
      if (MDStreamId.Length != 0) hash ^= MDStreamId.GetHashCode();
      if (RejectText.Length != 0) hash ^= RejectText.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MsgType.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(MsgType);
      }
      if (RejectText.Length != 0) {
        output.WriteRawTag(130, 83);
        output.WriteString(RejectText);
      }
      if (MDStreamId.Length != 0) {
        output.WriteRawTag(226, 93);
        output.WriteString(MDStreamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MsgType);
      }
      if (MDStreamId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MDStreamId);
      }
      if (RejectText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RejectText);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketDataRequestReject other) {
      if (other == null) {
        return;
      }
      if (other.MsgType.Length != 0) {
        MsgType = other.MsgType;
      }
      if (other.MDStreamId.Length != 0) {
        MDStreamId = other.MDStreamId;
      }
      if (other.RejectText.Length != 0) {
        RejectText = other.RejectText;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 282: {
            MsgType = input.ReadString();
            break;
          }
          case 10626: {
            RejectText = input.ReadString();
            break;
          }
          case 12002: {
            MDStreamId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Bars : pb::IMessage<Bars> {
    private static readonly pb::MessageParser<Bars> _parser = new pb::MessageParser<Bars>(() => new Bars());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Bars> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.MarketReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bars() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bars(Bars other) : this() {
      mDEntry_ = other.mDEntry_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bars Clone() {
      return new Bars(this);
    }

    /// <summary>Field number for the "MDEntry" field.</summary>
    public const int MDEntryFieldNumber = 268;
    private static readonly pb::FieldCodec<global::Api.MDEntry> _repeated_mDEntry_codec
        = pb::FieldCodec.ForMessage(2146, global::Api.MDEntry.Parser);
    private readonly pbc::RepeatedField<global::Api.MDEntry> mDEntry_ = new pbc::RepeatedField<global::Api.MDEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Api.MDEntry> MDEntry {
      get { return mDEntry_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Bars);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Bars other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mDEntry_.Equals(other.mDEntry_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mDEntry_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mDEntry_.WriteTo(output, _repeated_mDEntry_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mDEntry_.CalculateSize(_repeated_mDEntry_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Bars other) {
      if (other == null) {
        return;
      }
      mDEntry_.Add(other.mDEntry_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 2146: {
            mDEntry_.AddEntriesFrom(input, _repeated_mDEntry_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

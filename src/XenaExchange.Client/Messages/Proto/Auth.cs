// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: auth.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Api {

  /// <summary>Holder for reflection information generated from auth.proto</summary>
  public static partial class AuthReflection {

    #region Descriptor
    /// <summary>File descriptor for auth.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AuthReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgphdXRoLnByb3RvEgNhcGkitgEKBUxvZ29uEg8KB01zZ1R5cGUYIyABKAkS",
            "EgoKSGVhcnRCdEludBhsIAEoBRITCgpSZWplY3RUZXh0GLAKIAEoCRIPCgdB",
            "Y2NvdW50GAEgAygEEhMKC1NlbmRpbmdUaW1lGDQgASgDEhYKDUNzdG1BcHBs",
            "VmVySWQY6QggASgJEhEKCFVzZXJuYW1lGKkEIAEoCRIRCghQYXNzd29yZBiq",
            "BCABKAkSDwoHUmF3RGF0YRhgIAEoCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Logon), global::Api.Logon.Parser, new[]{ "MsgType", "HeartBtInt", "RejectText", "Account", "SendingTime", "CstmApplVerId", "Username", "Password", "RawData" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Logon : pb::IMessage<Logon> {
    private static readonly pb::MessageParser<Logon> _parser = new pb::MessageParser<Logon>(() => new Logon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Logon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.AuthReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Logon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Logon(Logon other) : this() {
      msgType_ = other.msgType_;
      heartBtInt_ = other.heartBtInt_;
      rejectText_ = other.rejectText_;
      account_ = other.account_.Clone();
      sendingTime_ = other.sendingTime_;
      cstmApplVerId_ = other.cstmApplVerId_;
      username_ = other.username_;
      password_ = other.password_;
      rawData_ = other.rawData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Logon Clone() {
      return new Logon(this);
    }

    /// <summary>Field number for the "MsgType" field.</summary>
    public const int MsgTypeFieldNumber = 35;
    private string msgType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgType {
      get { return msgType_; }
      set {
        msgType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HeartBtInt" field.</summary>
    public const int HeartBtIntFieldNumber = 108;
    private int heartBtInt_;
    /// <summary>
    /// SessionStatus SessionStatus = 1409;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeartBtInt {
      get { return heartBtInt_; }
      set {
        heartBtInt_ = value;
      }
    }

    /// <summary>Field number for the "RejectText" field.</summary>
    public const int RejectTextFieldNumber = 1328;
    private string rejectText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RejectText {
      get { return rejectText_; }
      set {
        rejectText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Account" field.</summary>
    public const int AccountFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_account_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> account_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Account {
      get { return account_; }
    }

    /// <summary>Field number for the "SendingTime" field.</summary>
    public const int SendingTimeFieldNumber = 52;
    private long sendingTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SendingTime {
      get { return sendingTime_; }
      set {
        sendingTime_ = value;
      }
    }

    /// <summary>Field number for the "CstmApplVerId" field.</summary>
    public const int CstmApplVerIdFieldNumber = 1129;
    private string cstmApplVerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CstmApplVerId {
      get { return cstmApplVerId_; }
      set {
        cstmApplVerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Username" field.</summary>
    public const int UsernameFieldNumber = 553;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 554;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RawData" field.</summary>
    public const int RawDataFieldNumber = 96;
    private string rawData_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RawData {
      get { return rawData_; }
      set {
        rawData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Logon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Logon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (HeartBtInt != other.HeartBtInt) return false;
      if (RejectText != other.RejectText) return false;
      if(!account_.Equals(other.account_)) return false;
      if (SendingTime != other.SendingTime) return false;
      if (CstmApplVerId != other.CstmApplVerId) return false;
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      if (RawData != other.RawData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType.Length != 0) hash ^= MsgType.GetHashCode();
      if (HeartBtInt != 0) hash ^= HeartBtInt.GetHashCode();
      if (RejectText.Length != 0) hash ^= RejectText.GetHashCode();
      hash ^= account_.GetHashCode();
      if (SendingTime != 0L) hash ^= SendingTime.GetHashCode();
      if (CstmApplVerId.Length != 0) hash ^= CstmApplVerId.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (RawData.Length != 0) hash ^= RawData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      account_.WriteTo(output, _repeated_account_codec);
      if (MsgType.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(MsgType);
      }
      if (SendingTime != 0L) {
        output.WriteRawTag(160, 3);
        output.WriteInt64(SendingTime);
      }
      if (RawData.Length != 0) {
        output.WriteRawTag(130, 6);
        output.WriteString(RawData);
      }
      if (HeartBtInt != 0) {
        output.WriteRawTag(224, 6);
        output.WriteInt32(HeartBtInt);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(202, 34);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(210, 34);
        output.WriteString(Password);
      }
      if (CstmApplVerId.Length != 0) {
        output.WriteRawTag(202, 70);
        output.WriteString(CstmApplVerId);
      }
      if (RejectText.Length != 0) {
        output.WriteRawTag(130, 83);
        output.WriteString(RejectText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MsgType);
      }
      if (HeartBtInt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HeartBtInt);
      }
      if (RejectText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RejectText);
      }
      size += account_.CalculateSize(_repeated_account_codec);
      if (SendingTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SendingTime);
      }
      if (CstmApplVerId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CstmApplVerId);
      }
      if (Username.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (RawData.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RawData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Logon other) {
      if (other == null) {
        return;
      }
      if (other.MsgType.Length != 0) {
        MsgType = other.MsgType;
      }
      if (other.HeartBtInt != 0) {
        HeartBtInt = other.HeartBtInt;
      }
      if (other.RejectText.Length != 0) {
        RejectText = other.RejectText;
      }
      account_.Add(other.account_);
      if (other.SendingTime != 0L) {
        SendingTime = other.SendingTime;
      }
      if (other.CstmApplVerId.Length != 0) {
        CstmApplVerId = other.CstmApplVerId;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.RawData.Length != 0) {
        RawData = other.RawData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            account_.AddEntriesFrom(input, _repeated_account_codec);
            break;
          }
          case 282: {
            MsgType = input.ReadString();
            break;
          }
          case 416: {
            SendingTime = input.ReadInt64();
            break;
          }
          case 770: {
            RawData = input.ReadString();
            break;
          }
          case 864: {
            HeartBtInt = input.ReadInt32();
            break;
          }
          case 4426: {
            Username = input.ReadString();
            break;
          }
          case 4434: {
            Password = input.ReadString();
            break;
          }
          case 9034: {
            CstmApplVerId = input.ReadString();
            break;
          }
          case 10626: {
            RejectText = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
